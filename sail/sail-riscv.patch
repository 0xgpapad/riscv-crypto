diff --git a/Makefile b/Makefile
index adc9add..beb5acd 100644
--- a/Makefile
+++ b/Makefile
@@ -26,6 +26,18 @@ ifeq ($(ARCH),RV64)
 SAIL_DEFAULT_INST += riscv_insts_dext.sail riscv_insts_cdext.sail
 endif
 
+SAIL_DEFAULT_INST += riscv_insts_crypto.sail
+ifeq ($(ARCH),RV32)
+    SAIL_DEFAULT_INST += riscv_insts_crypto_rv32.sail
+else ifeq ($(ARCH),RV64)
+    SAIL_DEFAULT_INST += riscv_insts_crypto_rv64.sail
+else
+  $(error '$(ARCH)' is not a valid architecture, must be one of: RV32, RV64)
+endif
+#SAIL_DEFAULT_INST += riscv_insts_crypto_rvv_aes.sail
+#SAIL_DEFAULT_INST += riscv_insts_crypto_rvv_alu.sail
+#SAIL_DEFAULT_INST += riscv_insts_crypto_rvv_sha.sail
+
 SAIL_SEQ_INST  = $(SAIL_DEFAULT_INST) riscv_jalr_seq.sail
 SAIL_RMEM_INST = $(SAIL_DEFAULT_INST) riscv_jalr_rmem.sail riscv_insts_rmem.sail
 
@@ -40,6 +52,7 @@ SAIL_SYS_SRCS += riscv_sync_exception.sail  # define the exception structure use
 SAIL_SYS_SRCS += riscv_next_control.sail    # helpers for the 'N' extension
 SAIL_SYS_SRCS += riscv_softfloat_interface.sail riscv_fdext_regs.sail riscv_fdext_control.sail
 SAIL_SYS_SRCS += riscv_csr_ext.sail         # access to CSR extensions
+SAIL_SYS_SRCS += riscv_crypto_entropy_source.sail
 SAIL_SYS_SRCS += riscv_sys_control.sail     # general exception handling
 
 SAIL_RV32_VM_SRCS = riscv_vmem_sv32.sail riscv_vmem_rv32.sail
@@ -63,6 +76,7 @@ SAIL_ARCH_SRCS = $(PRELUDE)
 SAIL_ARCH_SRCS += riscv_types_common.sail riscv_types_ext.sail riscv_types.sail
 SAIL_ARCH_SRCS += riscv_vmem_types.sail $(SAIL_REGS_SRCS) $(SAIL_SYS_SRCS) riscv_platform.sail
 SAIL_ARCH_SRCS += riscv_mem.sail $(SAIL_VM_SRCS)
+SAIL_ARCH_SRCS += riscv_types_crypto.sail
 SAIL_ARCH_RVFI_SRCS = $(PRELUDE) rvfi_dii.sail riscv_types_common.sail riscv_types_ext.sail riscv_types.sail riscv_vmem_types.sail $(SAIL_REGS_SRCS) $(SAIL_SYS_SRCS) riscv_platform.sail riscv_mem.sail $(SAIL_VM_SRCS)
 
 SAIL_STEP_SRCS = riscv_step_common.sail riscv_step_ext.sail riscv_decode_ext.sail riscv_fetch.sail riscv_step.sail
diff --git a/model/riscv_csr_map.sail b/model/riscv_csr_map.sail
index 7dc81ca..66d41e4 100644
--- a/model/riscv_csr_map.sail
+++ b/model/riscv_csr_map.sail
@@ -46,6 +46,7 @@ mapping clause csr_name_map = 0xF11  <-> "mvendorid"
 mapping clause csr_name_map = 0xF12  <-> "marchid"
 mapping clause csr_name_map = 0xF13  <-> "mimpid"
 mapping clause csr_name_map = 0xF14  <-> "mhartid"
+mapping clause csr_name_map = 0xF15  <-> "mentropy"
 /* machine trap setup */
 mapping clause csr_name_map = 0x300  <-> "mstatus"
 mapping clause csr_name_map = 0x301  <-> "misa"
@@ -93,6 +94,7 @@ mapping clause csr_name_map = 0x7a0  <-> "tselect"
 mapping clause csr_name_map = 0x7a1  <-> "tdata1"
 mapping clause csr_name_map = 0x7a2  <-> "tdata2"
 mapping clause csr_name_map = 0x7a3  <-> "tdata3"
+mapping clause csr_name_map = 0x7a9  <-> "mnoise"
 
 val csr_name : csreg -> string
 overload to_str = {csr_name}
@@ -117,4 +119,4 @@ scattered function ext_read_CSR
 
 /* returns new value (after legalisation) if the CSR is defined */
 val ext_write_CSR : (csreg, xlenbits) -> option(xlenbits) effect {rreg, wreg}
-scattered function ext_write_CSR
\ No newline at end of file
+scattered function ext_write_CSR
