diff --git a/riscv/decode.h b/riscv/decode.h
index 9e03676..1cf8bec 100644
--- a/riscv/decode.h
+++ b/riscv/decode.h
@@ -90,12 +90,15 @@ public:
   int64_t u_imm() { return int64_t(b) >> 12 << 12; }
   int64_t uj_imm() { return (x(21, 10) << 1) + (x(20, 1) << 11) + (x(12, 8) << 12) + (imm_sign() << 20); }
   uint64_t rd() { return x(7, 5); }
+  uint64_t rdp() { return x(8, 4); }
   uint64_t rs1() { return x(15, 5); }
   uint64_t rs2() { return x(20, 5); }
   uint64_t rs3() { return x(27, 5); }
   uint64_t rm() { return x(12, 3); }
   uint64_t csr() { return x(20, 12); }
 
+  uint64_t bs() {return x(30,2);}
+
   int64_t rvc_imm() { return x(2, 5) + (xs(12, 1) << 5); }
   int64_t rvc_zimm() { return x(2, 5) + (x(12, 1) << 5); }
   int64_t rvc_addi4spn_imm() { return (x(6, 1) << 2) + (x(5, 1) << 3) + (x(11, 2) << 4) + (x(7, 4) << 6); }
diff --git a/riscv/encoding.h b/riscv/encoding.h
index 3c4bf1c..c2c3967 100644
--- a/riscv/encoding.h
+++ b/riscv/encoding.h
@@ -564,6 +564,178 @@
 #define MASK_PACKUW  0xfe00707f
 #define MATCH_BFPW 0x4800703b
 #define MASK_BFPW  0xfe00707f
+#define MATCH_LUT4LO 0x6000002b
+#define MASK_LUT4LO 0xfe00707f
+#define MATCH_LUT4LO 0x6000002b
+#define MASK_LUT4LO  0xfe00707f
+#define MATCH_LUT4HI 0x6200002b
+#define MASK_LUT4HI 0xfe00707f
+#define MATCH_LUT4HI 0x6200002b
+#define MASK_LUT4HI  0xfe00707f
+#define MATCH_LUT4 0x6400002b
+#define MASK_LUT4 0xfe00707f
+#define MATCH_LUT4 0x6400002b
+#define MASK_LUT4  0xfe00707f
+#define MATCH_MMULU 0x200102b
+#define MASK_MMULU 0x60070ff
+#define MATCH_MMULU 0x200102b
+#define MASK_MMULU  0x60070ff
+#define MATCH_MACCU 0x102b
+#define MASK_MACCU 0x60070ff
+#define MATCH_MACCU 0x102b
+#define MASK_MACCU  0x60070ff
+#define MATCH_SAES32_ENCSM 0x202b
+#define MASK_SAES32_ENCSM 0x3e00707f
+#define MATCH_SAES32_ENCSM 0x202b
+#define MASK_SAES32_ENCSM  0x3e00707f
+#define MATCH_SAES32_ENCS 0x200202b
+#define MASK_SAES32_ENCS 0x3e00707f
+#define MATCH_SAES32_ENCS 0x200202b
+#define MASK_SAES32_ENCS  0x3e00707f
+#define MATCH_SAES32_DECSM 0x400202b
+#define MASK_SAES32_DECSM 0x3e00707f
+#define MATCH_SAES32_DECSM 0x400202b
+#define MASK_SAES32_DECSM  0x3e00707f
+#define MATCH_SAES32_DECS 0x600202b
+#define MASK_SAES32_DECS 0x3e00707f
+#define MATCH_SAES32_DECS 0x600202b
+#define MASK_SAES32_DECS  0x3e00707f
+#define MATCH_SAES64_SUB 0x800202b
+#define MASK_SAES64_SUB 0xfff0707f
+#define MATCH_SAES64_SUB 0x800202b
+#define MASK_SAES64_SUB  0xfff0707f
+#define MATCH_SAES64_IMIX 0x810202b
+#define MASK_SAES64_IMIX 0xfff0707f
+#define MATCH_SAES64_IMIX 0x810202b
+#define MASK_SAES64_IMIX  0xfff0707f
+#define MATCH_SAES64_ENCSM_LO 0x1000202b
+#define MASK_SAES64_ENCSM_LO 0xfe00707f
+#define MATCH_SAES64_ENCSM_LO 0x1000202b
+#define MASK_SAES64_ENCSM_LO  0xfe00707f
+#define MATCH_SAES64_ENCSM_HI 0x1200202b
+#define MASK_SAES64_ENCSM_HI 0xfe00707f
+#define MATCH_SAES64_ENCSM_HI 0x1200202b
+#define MASK_SAES64_ENCSM_HI  0xfe00707f
+#define MATCH_SAES64_ENCS_LO 0x1400202b
+#define MASK_SAES64_ENCS_LO 0xfe00707f
+#define MATCH_SAES64_ENCS_LO 0x1400202b
+#define MASK_SAES64_ENCS_LO  0xfe00707f
+#define MATCH_SAES64_ENCS_HI 0x1600202b
+#define MASK_SAES64_ENCS_HI 0xfe00707f
+#define MATCH_SAES64_ENCS_HI 0x1600202b
+#define MASK_SAES64_ENCS_HI  0xfe00707f
+#define MATCH_SAES64_DECSM_LO 0x1800202b
+#define MASK_SAES64_DECSM_LO 0xfe00707f
+#define MATCH_SAES64_DECSM_LO 0x1800202b
+#define MASK_SAES64_DECSM_LO  0xfe00707f
+#define MATCH_SAES64_DECSM_HI 0x1a00202b
+#define MASK_SAES64_DECSM_HI 0xfe00707f
+#define MATCH_SAES64_DECSM_HI 0x1a00202b
+#define MASK_SAES64_DECSM_HI  0xfe00707f
+#define MATCH_SAES64_DECS_LO 0x1c00202b
+#define MASK_SAES64_DECS_LO 0xfe00707f
+#define MATCH_SAES64_DECS_LO 0x1c00202b
+#define MASK_SAES64_DECS_LO  0xfe00707f
+#define MATCH_SAES64_DECS_HI 0x1e00202b
+#define MASK_SAES64_DECS_HI 0xfe00707f
+#define MATCH_SAES64_DECS_HI 0x1e00202b
+#define MASK_SAES64_DECS_HI  0xfe00707f
+#define MATCH_SSHA256_S0 0xe00702b
+#define MASK_SSHA256_S0 0xfff0707f
+#define MATCH_SSHA256_S0 0xe00702b
+#define MASK_SSHA256_S0  0xfff0707f
+#define MATCH_SSHA256_S1 0xe10702b
+#define MASK_SSHA256_S1 0xfff0707f
+#define MATCH_SSHA256_S1 0xe10702b
+#define MASK_SSHA256_S1  0xfff0707f
+#define MATCH_SSHA256_S2 0xe20702b
+#define MASK_SSHA256_S2 0xfff0707f
+#define MATCH_SSHA256_S2 0xe20702b
+#define MASK_SSHA256_S2  0xfff0707f
+#define MATCH_SSHA256_S3 0xe30702b
+#define MASK_SSHA256_S3 0xfff0707f
+#define MATCH_SSHA256_S3 0xe30702b
+#define MASK_SSHA256_S3  0xfff0707f
+#define MATCH_SSHA512_S0 0xe40702b
+#define MASK_SSHA512_S0 0xfff0707f
+#define MATCH_SSHA512_S0 0xe40702b
+#define MASK_SSHA512_S0  0xfff0707f
+#define MATCH_SSHA512_S1 0xe50702b
+#define MASK_SSHA512_S1 0xfff0707f
+#define MATCH_SSHA512_S1 0xe50702b
+#define MASK_SSHA512_S1  0xfff0707f
+#define MATCH_SSHA512_S2 0xe60702b
+#define MASK_SSHA512_S2 0xfff0707f
+#define MATCH_SSHA512_S2 0xe60702b
+#define MASK_SSHA512_S2  0xfff0707f
+#define MATCH_SSHA512_S3 0xe70702b
+#define MASK_SSHA512_S3 0xfff0707f
+#define MATCH_SSHA512_S3 0xe70702b
+#define MASK_SSHA512_S3  0xfff0707f
+#define MATCH_SSHA3_XY 0x10007003
+#define MASK_SSHA3_XY 0xfe00707f
+#define MATCH_SSHA3_XY 0x10007003
+#define MASK_SSHA3_XY  0xfe00707f
+#define MATCH_SSHA3_X1 0x12007003
+#define MASK_SSHA3_X1 0xfe00707f
+#define MATCH_SSHA3_X1 0x12007003
+#define MASK_SSHA3_X1  0xfe00707f
+#define MATCH_SSHA3_X2 0x14007003
+#define MASK_SSHA3_X2 0xfe00707f
+#define MATCH_SSHA3_X2 0x14007003
+#define MASK_SSHA3_X2  0xfe00707f
+#define MATCH_SSHA3_X4 0x16007003
+#define MASK_SSHA3_X4 0xfe00707f
+#define MATCH_SSHA3_X4 0x16007003
+#define MASK_SSHA3_X4  0xfe00707f
+#define MATCH_SSHA3_YX 0x18007003
+#define MASK_SSHA3_YX 0xfe00707f
+#define MATCH_SSHA3_YX 0x18007003
+#define MASK_SSHA3_YX  0xfe00707f
+#define MATCH_LBX 0x702b
+#define MASK_LBX 0xfe00707f
+#define MATCH_LBX 0x702b
+#define MASK_LBX  0xfe00707f
+#define MATCH_LHX 0x200702b
+#define MASK_LHX 0xfe00707f
+#define MATCH_LHX 0x200702b
+#define MASK_LHX  0xfe00707f
+#define MATCH_LWX 0x400702b
+#define MASK_LWX 0xfe00707f
+#define MATCH_LWX 0x400702b
+#define MASK_LWX  0xfe00707f
+#define MATCH_LDX 0x600702b
+#define MASK_LDX 0xfe00707f
+#define MATCH_LDX 0x600702b
+#define MASK_LDX  0xfe00707f
+#define MATCH_LBUX 0x800702b
+#define MASK_LBUX 0xfe00707f
+#define MATCH_LBUX 0x800702b
+#define MASK_LBUX  0xfe00707f
+#define MATCH_LHUX 0xa00702b
+#define MASK_LHUX 0xfe00707f
+#define MATCH_LHUX 0xa00702b
+#define MASK_LHUX  0xfe00707f
+#define MATCH_LWUX 0xc00702b
+#define MASK_LWUX 0xfe00707f
+#define MATCH_LWUX 0xc00702b
+#define MASK_LWUX  0xfe00707f
+#define MATCH_SBX 0x402b
+#define MASK_SBX 0x6007fff
+#define MATCH_SBX 0x402b
+#define MASK_SBX  0x6007fff
+#define MATCH_SHX 0x40ab
+#define MASK_SHX 0x6007fff
+#define MATCH_SHX 0x40ab
+#define MASK_SHX  0x6007fff
+#define MATCH_SWX 0x412b
+#define MASK_SWX 0x6007fff
+#define MATCH_SWX 0x412b
+#define MASK_SWX  0x6007fff
+#define MATCH_SDX 0x41ab
+#define MASK_SDX 0x6007fff
+#define MATCH_SDX 0x41ab
+#define MASK_SDX  0x6007fff
 #define MATCH_AMOADD_W 0x202f
 #define MASK_AMOADD_W  0xf800707f
 #define MATCH_AMOXOR_W 0x2000202f
@@ -2156,6 +2328,49 @@ DECLARE_INSN(bdepw, MATCH_BDEPW, MASK_BDEPW)
 DECLARE_INSN(packw, MATCH_PACKW, MASK_PACKW)
 DECLARE_INSN(packuw, MATCH_PACKUW, MASK_PACKUW)
 DECLARE_INSN(bfpw, MATCH_BFPW, MASK_BFPW)
+DECLARE_INSN(lut4lo, MATCH_LUT4LO, MASK_LUT4LO)
+DECLARE_INSN(lut4hi, MATCH_LUT4HI, MASK_LUT4HI)
+DECLARE_INSN(lut4, MATCH_LUT4, MASK_LUT4)
+DECLARE_INSN(mmulu, MATCH_MMULU, MASK_MMULU)
+DECLARE_INSN(maccu, MATCH_MACCU, MASK_MACCU)
+DECLARE_INSN(saes32_encsm, MATCH_SAES32_ENCSM, MASK_SAES32_ENCSM)
+DECLARE_INSN(saes32_encs, MATCH_SAES32_ENCS, MASK_SAES32_ENCS)
+DECLARE_INSN(saes32_decsm, MATCH_SAES32_DECSM, MASK_SAES32_DECSM)
+DECLARE_INSN(saes32_decs, MATCH_SAES32_DECS, MASK_SAES32_DECS)
+DECLARE_INSN(saes64_sub, MATCH_SAES64_SUB, MASK_SAES64_SUB)
+DECLARE_INSN(saes64_imix, MATCH_SAES64_IMIX, MASK_SAES64_IMIX)
+DECLARE_INSN(saes64_encsm_lo, MATCH_SAES64_ENCSM_LO, MASK_SAES64_ENCSM_LO)
+DECLARE_INSN(saes64_encsm_hi, MATCH_SAES64_ENCSM_HI, MASK_SAES64_ENCSM_HI)
+DECLARE_INSN(saes64_encs_lo, MATCH_SAES64_ENCS_LO, MASK_SAES64_ENCS_LO)
+DECLARE_INSN(saes64_encs_hi, MATCH_SAES64_ENCS_HI, MASK_SAES64_ENCS_HI)
+DECLARE_INSN(saes64_decsm_lo, MATCH_SAES64_DECSM_LO, MASK_SAES64_DECSM_LO)
+DECLARE_INSN(saes64_decsm_hi, MATCH_SAES64_DECSM_HI, MASK_SAES64_DECSM_HI)
+DECLARE_INSN(saes64_decs_lo, MATCH_SAES64_DECS_LO, MASK_SAES64_DECS_LO)
+DECLARE_INSN(saes64_decs_hi, MATCH_SAES64_DECS_HI, MASK_SAES64_DECS_HI)
+DECLARE_INSN(ssha256_s0, MATCH_SSHA256_S0, MASK_SSHA256_S0)
+DECLARE_INSN(ssha256_s1, MATCH_SSHA256_S1, MASK_SSHA256_S1)
+DECLARE_INSN(ssha256_s2, MATCH_SSHA256_S2, MASK_SSHA256_S2)
+DECLARE_INSN(ssha256_s3, MATCH_SSHA256_S3, MASK_SSHA256_S3)
+DECLARE_INSN(ssha512_s0, MATCH_SSHA512_S0, MASK_SSHA512_S0)
+DECLARE_INSN(ssha512_s1, MATCH_SSHA512_S1, MASK_SSHA512_S1)
+DECLARE_INSN(ssha512_s2, MATCH_SSHA512_S2, MASK_SSHA512_S2)
+DECLARE_INSN(ssha512_s3, MATCH_SSHA512_S3, MASK_SSHA512_S3)
+DECLARE_INSN(ssha3_xy, MATCH_SSHA3_XY, MASK_SSHA3_XY)
+DECLARE_INSN(ssha3_x1, MATCH_SSHA3_X1, MASK_SSHA3_X1)
+DECLARE_INSN(ssha3_x2, MATCH_SSHA3_X2, MASK_SSHA3_X2)
+DECLARE_INSN(ssha3_x4, MATCH_SSHA3_X4, MASK_SSHA3_X4)
+DECLARE_INSN(ssha3_yx, MATCH_SSHA3_YX, MASK_SSHA3_YX)
+DECLARE_INSN(lbx, MATCH_LBX, MASK_LBX)
+DECLARE_INSN(lhx, MATCH_LHX, MASK_LHX)
+DECLARE_INSN(lwx, MATCH_LWX, MASK_LWX)
+DECLARE_INSN(ldx, MATCH_LDX, MASK_LDX)
+DECLARE_INSN(lbux, MATCH_LBUX, MASK_LBUX)
+DECLARE_INSN(lhux, MATCH_LHUX, MASK_LHUX)
+DECLARE_INSN(lwux, MATCH_LWUX, MASK_LWUX)
+DECLARE_INSN(sbx, MATCH_SBX, MASK_SBX)
+DECLARE_INSN(shx, MATCH_SHX, MASK_SHX)
+DECLARE_INSN(swx, MATCH_SWX, MASK_SWX)
+DECLARE_INSN(sdx, MATCH_SDX, MASK_SDX)
 DECLARE_INSN(amoadd_w, MATCH_AMOADD_W, MASK_AMOADD_W)
 DECLARE_INSN(amoxor_w, MATCH_AMOXOR_W, MASK_AMOXOR_W)
 DECLARE_INSN(amoor_w, MATCH_AMOOR_W, MASK_AMOOR_W)
diff --git a/riscv/insns/lbux.h b/riscv/insns/lbux.h
new file mode 100644
index 0000000..e8b3881
--- /dev/null
+++ b/riscv/insns/lbux.h
@@ -0,0 +1,4 @@
+
+uint64_t address     = RS1 + RS2;
+WRITE_RD(MMU.load_uint8(address));
+
diff --git a/riscv/insns/lbx.h b/riscv/insns/lbx.h
new file mode 100644
index 0000000..f52500d
--- /dev/null
+++ b/riscv/insns/lbx.h
@@ -0,0 +1,5 @@
+
+uint64_t address     = RS1 + RS2;
+WRITE_RD(MMU.load_int8(address));
+
+
diff --git a/riscv/insns/ldx.h b/riscv/insns/ldx.h
new file mode 100644
index 0000000..50c5721
--- /dev/null
+++ b/riscv/insns/ldx.h
@@ -0,0 +1,5 @@
+require_rv64;
+
+uint64_t address     = RS1 + (RS2 << 3);
+WRITE_RD(MMU.load_int64(address));
+
diff --git a/riscv/insns/lhux.h b/riscv/insns/lhux.h
new file mode 100644
index 0000000..fe590b3
--- /dev/null
+++ b/riscv/insns/lhux.h
@@ -0,0 +1,4 @@
+
+uint64_t address     = RS1 + (RS2 << 1);
+WRITE_RD(MMU.load_uint16(address));
+
diff --git a/riscv/insns/lhx.h b/riscv/insns/lhx.h
new file mode 100644
index 0000000..9ca1a1a
--- /dev/null
+++ b/riscv/insns/lhx.h
@@ -0,0 +1,4 @@
+
+uint64_t address     = RS1 + (RS2 << 1);
+WRITE_RD(MMU.load_int16(address));
+
diff --git a/riscv/insns/lut4.h b/riscv/insns/lut4.h
new file mode 100644
index 0000000..891a2d4
--- /dev/null
+++ b/riscv/insns/lut4.h
@@ -0,0 +1,7 @@
+require_rv64;
+uint64_t result = 0;
+for(int i = 0; i < 64; i += 4) {
+    result |= (RS2 >> (4*((RS1 >> i)&0xF)) & 0xF) << i;
+}
+WRITE_RD(result);
+
diff --git a/riscv/insns/lut4hi.h b/riscv/insns/lut4hi.h
new file mode 100644
index 0000000..31c81d5
--- /dev/null
+++ b/riscv/insns/lut4hi.h
@@ -0,0 +1,8 @@
+uint32_t result = 0;
+for(int i = 0; i < 32; i += 4) {
+    uint8_t idx =  (RS1 >> i) & 0x7;
+    uint8_t hi  = ((RS1 >> i) & 0xF) >= 8;
+    result     |= hi ? (RS2 >> (4*idx) & 0xF) << i : 0;
+}
+WRITE_RD(zext_xlen(result));
+
diff --git a/riscv/insns/lut4lo.h b/riscv/insns/lut4lo.h
new file mode 100644
index 0000000..7ae71ca
--- /dev/null
+++ b/riscv/insns/lut4lo.h
@@ -0,0 +1,7 @@
+uint32_t result = 0;
+for(int i = 0; i < 32; i += 4) {
+    uint8_t idx =  (RS1 >> i) & 0x7;
+    uint8_t lo  = ((RS1 >> i) & 0xF) <  8;
+    result     |= lo ? (RS2 >> (4*idx) & 0xF) << i : 0;
+}
+WRITE_RD(zext_xlen(result));
diff --git a/riscv/insns/lwux.h b/riscv/insns/lwux.h
new file mode 100644
index 0000000..d87dbd1
--- /dev/null
+++ b/riscv/insns/lwux.h
@@ -0,0 +1,5 @@
+require_rv64;
+
+uint64_t address     = RS1 + (RS2 << 2);
+WRITE_RD(MMU.load_uint32(address));
+
diff --git a/riscv/insns/lwx.h b/riscv/insns/lwx.h
new file mode 100644
index 0000000..082cad1
--- /dev/null
+++ b/riscv/insns/lwx.h
@@ -0,0 +1,4 @@
+
+uint64_t address     = RS1 + (RS2 << 2);
+WRITE_RD(MMU.load_int32(address));
+
diff --git a/riscv/insns/maccu.h b/riscv/insns/maccu.h
new file mode 100644
index 0000000..c072127
--- /dev/null
+++ b/riscv/insns/maccu.h
@@ -0,0 +1,37 @@
+
+int rd1 = (insn.rdp() << 1)       ;
+int rd2 = (insn.rdp() << 1) | 0x1 ;
+
+if(xlen == 32) {
+
+    uint64_t    lhs         = ((uint64_t)(RS1 & 0xFFFFFFFF)<<32) | 
+                              (uint64_t)(RS2 & 0xFFFFFFFF) ;
+
+    uint32_t    rhs         = (uint32_t)(RS3 & 0xFFFFFFFF) ;
+
+    uint64_t    result      = lhs + rhs;
+
+    uint32_t    result_lo   = (uint32_t)(result      );
+    uint32_t    result_hi   = (uint32_t)(result >> 32);
+
+    WRITE_REG(rd1, result_lo);
+    WRITE_REG(rd2, result_hi);
+
+} else if(xlen == 64) {
+    
+    uint64_t result_lo;
+    uint64_t result_hi;
+    
+    result_lo = RS2 + RS3;
+    result_hi = RS3 + (result_lo < RS2);
+
+    WRITE_REG(rd1, result_lo);
+    WRITE_REG(rd2, result_hi);
+
+} else {
+    // TBD: How/do these instructions work on RV128?
+    assert(0);
+}
+
+
+
diff --git a/riscv/insns/mmulu.h b/riscv/insns/mmulu.h
new file mode 100644
index 0000000..436e252
--- /dev/null
+++ b/riscv/insns/mmulu.h
@@ -0,0 +1,33 @@
+
+int rd1 = (insn.rdp() << 1)       ;
+int rd2 = (insn.rdp() << 1) | 0x1 ;
+
+if(xlen == 32) {
+
+    uint64_t result = ((RS1&0xFFFFFFFF) *
+                       (RS2&0xFFFFFFFF)) +
+                      (RS3&0xFFFFFFFF);
+    
+    
+    uint32_t result_lo       = result & 0xFFFFFFFF;
+    uint32_t result_hi       = result >> xlen     ;
+    
+    WRITE_REG(rd1, result_lo);
+    WRITE_REG(rd2, result_hi);
+
+} else if(xlen == 64) {
+
+    int128_t result = ((int128_t)RS1 * RS2) + RS3;
+
+    uint64_t result_lo = result & 0xFFFFFFFFFFFFFFFF;
+    uint64_t result_hi = (result >> xlen);
+
+    WRITE_REG(rd1, result_lo);
+    WRITE_REG(rd2, result_hi);
+
+} else {
+    // TBD: How/do these instructions work on RV128?
+    assert(0);
+}
+
+
diff --git a/riscv/insns/saes32_decs.h b/riscv/insns/saes32_decs.h
new file mode 100644
index 0000000..99cc712
--- /dev/null
+++ b/riscv/insns/saes32_decs.h
@@ -0,0 +1,14 @@
+
+#include "saes_common.h"
+
+uint8_t     bs = insn.bs();
+
+uint8_t     t0 = RS1 >> (8*bs);
+uint8_t      x = AES_DEC_SBOX[t0];
+uint32_t     u = x;
+
+u = (u << (8*bs)) | (u >> (32-8*bs));
+
+WRITE_RD(u ^ RS2);
+
+
diff --git a/riscv/insns/saes32_decsm.h b/riscv/insns/saes32_decsm.h
new file mode 100644
index 0000000..32997d6
--- /dev/null
+++ b/riscv/insns/saes32_decsm.h
@@ -0,0 +1,21 @@
+
+#include "saes_common.h"
+
+uint8_t     bs = insn.bs();
+
+uint8_t     t0 = RS1 >> (8*bs);
+uint8_t      x = AES_DEC_SBOX[t0];
+uint32_t     u ;
+
+u = (AES_GFMUL(x,0xb) << 24) |
+    (AES_GFMUL(x,0xd) << 16) |
+    (AES_GFMUL(x,0x9) <<  8) |
+    (AES_GFMUL(x,0xe) <<  0) ;
+
+u = (u << (8*bs)) | (u >> (32-8*bs));
+
+WRITE_RD(u ^ RS2);
+
+
+
+
diff --git a/riscv/insns/saes32_encs.h b/riscv/insns/saes32_encs.h
new file mode 100644
index 0000000..4f8e34f
--- /dev/null
+++ b/riscv/insns/saes32_encs.h
@@ -0,0 +1,14 @@
+
+#include "saes_common.h"
+
+uint8_t     bs = insn.bs();
+
+uint8_t     t0 = RS1 >> (8*bs);
+uint8_t      x = AES_ENC_SBOX[t0];
+uint32_t     u = x;
+
+u = (u << (8*bs)) | (u >> (32-8*bs));
+
+WRITE_RD(u ^ RS2);
+
+
diff --git a/riscv/insns/saes32_encsm.h b/riscv/insns/saes32_encsm.h
new file mode 100644
index 0000000..e0cd8e4
--- /dev/null
+++ b/riscv/insns/saes32_encsm.h
@@ -0,0 +1,18 @@
+
+#include "saes_common.h"
+
+uint8_t     bs = insn.bs();
+
+uint8_t     t0 = RS1 >> (8*bs);
+uint8_t      x = AES_ENC_SBOX[t0];
+uint32_t     u ;
+
+u = (AES_GFMUL(x,3) << 24) |
+    (          x    << 16) |
+    (          x    <<  8) |
+    (AES_GFMUL(x,2) <<  0) ;
+
+u = (u << (8*bs)) | (u >> (32-8*bs));
+
+WRITE_RD(u ^ RS2);
+
diff --git a/riscv/insns/saes_common.h b/riscv/insns/saes_common.h
new file mode 100644
index 0000000..b04f8a8
--- /dev/null
+++ b/riscv/insns/saes_common.h
@@ -0,0 +1,103 @@
+
+uint8_t AES_ENC_SBOX[]= {
+  0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5,
+  0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
+  0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0,
+  0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
+  0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC,
+  0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
+  0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A,
+  0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
+  0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0,
+  0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
+  0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B,
+  0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
+  0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85,
+  0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
+  0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5,
+  0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
+  0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17,
+  0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
+  0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88,
+  0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
+  0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C,
+  0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
+  0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9,
+  0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
+  0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6,
+  0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
+  0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E,
+  0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
+  0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94,
+  0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
+  0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68,
+  0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
+};
+
+uint8_t AES_DEC_SBOX[] = {
+  0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38,
+  0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
+  0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87,
+  0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
+  0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D,
+  0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
+  0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2,
+  0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
+  0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16,
+  0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
+  0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA,
+  0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
+  0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A,
+  0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
+  0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02,
+  0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
+  0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA,
+  0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
+  0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85,
+  0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
+  0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89,
+  0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
+  0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20,
+  0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
+  0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31,
+  0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
+  0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D,
+  0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
+  0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0,
+  0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
+  0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26,
+  0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
+};
+
+#define AES_UNPACK_BYTES(b0,b1,b2,b3) \
+    uint8_t  b0 = (RS1 >>  0) & 0xFF; \
+    uint8_t  b1 = (RS2 >>  8) & 0xFF; \
+    uint8_t  b2 = (RS1 >> 16) & 0xFF; \
+    uint8_t  b3 = (RS2 >> 24) & 0xFF; \
+
+#define AES_PACK_BYTES(b0,b1,b2,b3) ( \
+    (uint32_t)b0 <<  0  | \
+    (uint32_t)b1 <<  8  | \
+    (uint32_t)b2 << 16  | \
+    (uint32_t)b3 << 24  )
+
+#define AES_SBOX(b0, b1, b2, b3) \
+    b0 = AES_ENC_SBOX[b0]; \
+    b1 = AES_ENC_SBOX[b1]; \
+    b2 = AES_ENC_SBOX[b2]; \
+    b3 = AES_ENC_SBOX[b3]; \
+
+#define AES_RSBOX(b0, b1, b2, b3) \
+    b0 = AES_DEC_SBOX[b0]; \
+    b1 = AES_DEC_SBOX[b1]; \
+    b2 = AES_DEC_SBOX[b2]; \
+    b3 = AES_DEC_SBOX[b3]; \
+
+#define AES_XTIME(a) \
+    ((a << 1) ^ ((a&0x80) ? 0x1b : 0))
+
+#define AES_GFMUL(a,b) (( \
+    ( ( (b) & 0x1 ) ?                              (a)   : 0 ) ^ \
+    ( ( (b) & 0x2 ) ?                     AES_XTIME(a)   : 0 ) ^ \
+    ( ( (b) & 0x4 ) ?           AES_XTIME(AES_XTIME(a))  : 0 ) ^ \
+    ( ( (b) & 0x8 ) ? AES_XTIME(AES_XTIME(AES_XTIME(a))) : 0 ) )&0xFF)
diff --git a/riscv/insns/sbx.h b/riscv/insns/sbx.h
new file mode 100644
index 0000000..b31ed78
--- /dev/null
+++ b/riscv/insns/sbx.h
@@ -0,0 +1,2 @@
+MMU.store_uint8(RS1 + RS2, RS3);
+
diff --git a/riscv/insns/sdx.h b/riscv/insns/sdx.h
new file mode 100644
index 0000000..2905688
--- /dev/null
+++ b/riscv/insns/sdx.h
@@ -0,0 +1,4 @@
+require_rv64;
+
+MMU.store_uint64(RS1 + (RS2 << 3), RS3);
+
diff --git a/riscv/insns/shx.h b/riscv/insns/shx.h
new file mode 100644
index 0000000..aff3490
--- /dev/null
+++ b/riscv/insns/shx.h
@@ -0,0 +1,2 @@
+MMU.store_uint16(RS1 + (RS2 << 1), RS3);
+
diff --git a/riscv/insns/ssha256_s0.h b/riscv/insns/ssha256_s0.h
new file mode 100644
index 0000000..af3d413
--- /dev/null
+++ b/riscv/insns/ssha256_s0.h
@@ -0,0 +1,11 @@
+
+#define ROR32(a,amt) ((a << (-amt & (32-1))) | (a >> (amt & (32-1))))
+
+uint32_t a = RS1;
+
+WRITE_RD(
+    ROR32(a, 7) ^ ROR32(a,18) ^ (a >> 3)
+);
+
+#undef ROR32
+
diff --git a/riscv/insns/ssha256_s1.h b/riscv/insns/ssha256_s1.h
new file mode 100644
index 0000000..882a3e0
--- /dev/null
+++ b/riscv/insns/ssha256_s1.h
@@ -0,0 +1,11 @@
+
+#define ROR32(a,amt) ((a << (-amt & (32-1))) | (a >> (amt & (32-1))))
+
+uint32_t a = RS1;
+
+WRITE_RD(
+    ROR32(a, 17) ^ ROR32(a,19) ^ (a >> 10)
+);
+
+#undef ROR32
+
diff --git a/riscv/insns/ssha256_s2.h b/riscv/insns/ssha256_s2.h
new file mode 100644
index 0000000..4afbeec
--- /dev/null
+++ b/riscv/insns/ssha256_s2.h
@@ -0,0 +1,11 @@
+
+#define ROR32(a,amt) ((a << (-amt & (32-1))) | (a >> (amt & (32-1))))
+
+uint32_t a = RS1;
+
+WRITE_RD(
+    ROR32(a, 2) ^ ROR32(a,13) ^ ROR32(a, 22)
+);
+
+#undef ROR32
+
diff --git a/riscv/insns/ssha256_s3.h b/riscv/insns/ssha256_s3.h
new file mode 100644
index 0000000..b91d3ab
--- /dev/null
+++ b/riscv/insns/ssha256_s3.h
@@ -0,0 +1,11 @@
+
+#define ROR32(a,amt) ((a << (-amt & (32-1))) | (a >> (amt & (32-1))))
+
+uint32_t a = RS1;
+
+WRITE_RD(
+    ROR32(a, 6) ^ ROR32(a,11) ^ ROR32(a, 25)
+);
+
+#undef ROR32
+
diff --git a/riscv/insns/ssha3_x1.h b/riscv/insns/ssha3_x1.h
new file mode 100644
index 0000000..ca6ec9b
--- /dev/null
+++ b/riscv/insns/ssha3_x1.h
@@ -0,0 +1,10 @@
+
+uint32_t x = RS1 & 0x7;
+uint32_t y = RS2 & 0x7;
+
+uint32_t shamt = 3;
+
+uint32_t result = (((x+1)%5) + 5*((y)%5)) << shamt;
+
+WRITE_RD(result);
+
diff --git a/riscv/insns/ssha3_x2.h b/riscv/insns/ssha3_x2.h
new file mode 100644
index 0000000..7023703
--- /dev/null
+++ b/riscv/insns/ssha3_x2.h
@@ -0,0 +1,10 @@
+
+uint32_t x = RS1 & 0x7;
+uint32_t y = RS2 & 0x7;
+
+uint32_t shamt = 3;
+
+uint32_t result = (((x+2)%5) + 5*((y)%5)) << shamt;
+
+WRITE_RD(result);
+
diff --git a/riscv/insns/ssha3_x4.h b/riscv/insns/ssha3_x4.h
new file mode 100644
index 0000000..8df936e
--- /dev/null
+++ b/riscv/insns/ssha3_x4.h
@@ -0,0 +1,10 @@
+
+uint32_t x = RS1 & 0x7;
+uint32_t y = RS2 & 0x7;
+
+uint32_t shamt = 3;
+
+uint32_t result = (((x+4)%5) + 5*((y)%5)) << shamt;
+
+WRITE_RD(result);
+
diff --git a/riscv/insns/ssha3_xy.h b/riscv/insns/ssha3_xy.h
new file mode 100644
index 0000000..958e92f
--- /dev/null
+++ b/riscv/insns/ssha3_xy.h
@@ -0,0 +1,10 @@
+
+uint32_t x = RS1 & 0x7;
+uint32_t y = RS2 & 0x7;
+
+uint32_t shamt = 3;
+
+uint32_t result = (((x)%5) + 5*((y)%5)) << shamt;
+
+WRITE_RD(result);
+
diff --git a/riscv/insns/ssha3_yx.h b/riscv/insns/ssha3_yx.h
new file mode 100644
index 0000000..aebda26
--- /dev/null
+++ b/riscv/insns/ssha3_yx.h
@@ -0,0 +1,10 @@
+
+uint32_t x = RS1 & 0x7;
+uint32_t y = RS2 & 0x7;
+
+uint32_t shamt = 3;
+
+uint32_t result = (((y)%5) + 5*((2*x+3*y)%5)) << shamt;
+
+WRITE_RD(result);
+
diff --git a/riscv/insns/ssha512_s0.h b/riscv/insns/ssha512_s0.h
new file mode 100644
index 0000000..0b490b0
--- /dev/null
+++ b/riscv/insns/ssha512_s0.h
@@ -0,0 +1,12 @@
+require_rv64;
+
+#define ROR64(a,amt) ((a << (-amt & (64-1))) | (a >> (amt & (64-1))))
+
+uint64_t a = RS1;
+
+WRITE_RD(
+    ROR64(a,  1) ^ ROR64(a, 8) ^ (a >>  7)
+);
+
+#undef ROR64
+
diff --git a/riscv/insns/ssha512_s1.h b/riscv/insns/ssha512_s1.h
new file mode 100644
index 0000000..ab66c6a
--- /dev/null
+++ b/riscv/insns/ssha512_s1.h
@@ -0,0 +1,12 @@
+require_rv64;
+
+#define ROR64(a,amt) ((a << (-amt & (64-1))) | (a >> (amt & (64-1))))
+
+uint64_t a = RS1;
+
+WRITE_RD(
+    ROR64(a, 19) ^ ROR64(a,61) ^ (a >>  6)
+);
+
+#undef ROR64
+
diff --git a/riscv/insns/ssha512_s2.h b/riscv/insns/ssha512_s2.h
new file mode 100644
index 0000000..ad2dc89
--- /dev/null
+++ b/riscv/insns/ssha512_s2.h
@@ -0,0 +1,12 @@
+require_rv64;
+
+#define ROR64(a,amt) ((a << (-amt & (64-1))) | (a >> (amt & (64-1))))
+
+uint64_t a = RS1;
+
+WRITE_RD(
+    ROR64(a, 28) ^ ROR64(a,34) ^ ROR64(a,39)
+);
+
+#undef ROR64
+
diff --git a/riscv/insns/ssha512_s3.h b/riscv/insns/ssha512_s3.h
new file mode 100644
index 0000000..a2e555b
--- /dev/null
+++ b/riscv/insns/ssha512_s3.h
@@ -0,0 +1,12 @@
+require_rv64;
+
+#define ROR64(a,amt) ((a << (-amt & (64-1))) | (a >> (amt & (64-1))))
+
+uint64_t a = RS1;
+
+WRITE_RD(
+    ROR64(a, 14) ^ ROR64(a, 18) ^ ROR64(a, 41)
+);
+
+#undef ROR64
+
diff --git a/riscv/insns/swx.h b/riscv/insns/swx.h
new file mode 100644
index 0000000..c5141dc
--- /dev/null
+++ b/riscv/insns/swx.h
@@ -0,0 +1,2 @@
+MMU.store_uint32(RS1 + (RS2 << 2), RS3);
+
diff --git a/riscv/riscv.mk.in b/riscv/riscv.mk.in
index 4ee64fa..666eaa1 100644
--- a/riscv/riscv.mk.in
+++ b/riscv/riscv.mk.in
@@ -401,6 +401,41 @@ riscv_insn_ext_b = \
 	unshflw \
 	xnor \
 
+riscv_insn_ext_s_crypto = \
+    lut4lo \
+    lut4hi \
+    lut4 \
+    mmulu \
+    maccu \
+    saes32_encs \
+    saes32_encsm\
+    saes32_decs \
+    saes32_decsm\
+    ssha256_s0 \
+    ssha256_s1 \
+    ssha256_s2 \
+    ssha256_s3 \
+    ssha512_s0 \
+    ssha512_s1 \
+    ssha512_s2 \
+    ssha512_s3 \
+    ssha3_x1 \
+    ssha3_x2 \
+    ssha3_x4 \
+    ssha3_xy \
+    ssha3_yx \
+    lbx \
+    lbux \
+    lhx \
+    lhux \
+    lwx \
+    sbx \
+    shx \
+    swx \
+    lwux \
+    ldx \
+    sdx
+
 riscv_insn_ext_v_alu_int = \
 	vaadd_vi \
 	vaadd_vv \
@@ -782,6 +817,7 @@ riscv_insn_list = \
 	$(riscv_insn_ext_d) \
 	$(riscv_insn_ext_q) \
 	$(riscv_insn_ext_b) \
+	$(riscv_insn_ext_s_crypto) \
 	$(if $(HAVE_INT128),$(riscv_insn_ext_v),) \
 	$(riscv_insn_priv) \
 
