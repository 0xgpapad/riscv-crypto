diff --git a/riscv/decode.h b/riscv/decode.h
index 9e03676..a76af54 100644
--- a/riscv/decode.h
+++ b/riscv/decode.h
@@ -96,6 +96,9 @@ public:
   uint64_t rm() { return x(12, 3); }
   uint64_t csr() { return x(20, 12); }
 
+  uint64_t bs() {return x(30,2);}
+  uint64_t rcon() {return x(20,4);}
+
   int64_t rvc_imm() { return x(2, 5) + (xs(12, 1) << 5); }
   int64_t rvc_zimm() { return x(2, 5) + (x(12, 1) << 5); }
   int64_t rvc_addi4spn_imm() { return (x(6, 1) << 2) + (x(5, 1) << 3) + (x(11, 2) << 4) + (x(7, 4) << 6); }
diff --git a/riscv/encoding.h b/riscv/encoding.h
index 3c4bf1c..10e864f 100644
--- a/riscv/encoding.h
+++ b/riscv/encoding.h
@@ -564,6 +564,68 @@
 #define MASK_PACKUW  0xfe00707f
 #define MATCH_BFPW 0x4800703b
 #define MASK_BFPW  0xfe00707f
+// Crypto ISE - Begin
+#define MATCH_SM4ED 0x800302b
+#define MASK_SM4ED 0x3e00707f
+#define MATCH_SM4KS 0xa00302b
+#define MASK_SM4KS 0x3e00707f
+#define MATCH_AES32ESMI 0x202b
+#define MASK_AES32ESMI 0x3e00707f
+#define MATCH_AES32ESI 0x200202b
+#define MASK_AES32ESI 0x3e00707f
+#define MATCH_AES32DSMI 0x400202b
+#define MASK_AES32DSMI 0x3e00707f
+#define MATCH_AES32DSI 0x600202b
+#define MASK_AES32DSI 0x3e00707f
+#define MATCH_AES64KS1I 0x800202b
+#define MASK_AES64KS1I 0xff00707f
+#define MATCH_AES64KS2 0xa00202b
+#define MASK_AES64KS2 0xfe00707f
+#define MATCH_AES64IM 0xc10202b
+#define MASK_AES64IM 0xfff0707f
+#define MATCH_AES64ESM 0xe00202b
+#define MASK_AES64ESM 0xfe00707f
+#define MATCH_AES64ES 0x1000202b
+#define MASK_AES64ES 0xfe00707f
+#define MATCH_AES64DSM 0x1200202b
+#define MASK_AES64DSM 0xfe00707f
+#define MATCH_AES64DS 0x1400202b
+#define MASK_AES64DS 0xfe00707f
+#define MATCH_SHA256SIG0 0xe00702b
+#define MASK_SHA256SIG0 0xfff0707f
+#define MATCH_SHA256SIG1 0xe10702b
+#define MASK_SHA256SIG1 0xfff0707f
+#define MATCH_SHA256SUM0 0xe20702b
+#define MASK_SHA256SUM0 0xfff0707f
+#define MATCH_SHA256SUM1 0xe30702b
+#define MASK_SHA256SUM1 0xfff0707f
+#define MATCH_SM3P0 0xe80702b
+#define MASK_SM3P0 0xfff0707f
+#define MATCH_SM3P1 0xe90702b
+#define MASK_SM3P1 0xfff0707f
+#define MATCH_SHA512SIG0L 0x1000702b
+#define MASK_SHA512SIG0L 0xfe00707f
+#define MATCH_SHA512SIG0H 0x1200702b
+#define MASK_SHA512SIG0H 0xfe00707f
+#define MATCH_SHA512SIG1L 0x1400702b
+#define MASK_SHA512SIG1L 0xfe00707f
+#define MATCH_SHA512SIG1H 0x1600702b
+#define MASK_SHA512SIG1H 0xfe00707f
+#define MATCH_SHA512SUM0R 0x1800702b
+#define MASK_SHA512SUM0R 0xfe00707f
+#define MATCH_SHA512SUM1R 0x1a00702b
+#define MASK_SHA512SUM1R 0xfe00707f
+#define MATCH_SHA512SIG0 0xe40702b
+#define MASK_SHA512SIG0 0xfff0707f
+#define MATCH_SHA512SIG1 0xe50702b
+#define MASK_SHA512SIG1 0xfff0707f
+#define MATCH_SHA512SUM0 0xe60702b
+#define MASK_SHA512SUM0 0xfff0707f
+#define MATCH_SHA512SUM1 0xe70702b
+#define MASK_SHA512SUM1 0xfff0707f
+#define MATCH_POLLENTROPYI 0x1e05702b
+#define MASK_POLLENTROPYI 0xfe0ff07f
+// Crypto ISE - end
 #define MATCH_AMOADD_W 0x202f
 #define MASK_AMOADD_W  0xf800707f
 #define MATCH_AMOXOR_W 0x2000202f
@@ -2156,6 +2218,38 @@ DECLARE_INSN(bdepw, MATCH_BDEPW, MASK_BDEPW)
 DECLARE_INSN(packw, MATCH_PACKW, MASK_PACKW)
 DECLARE_INSN(packuw, MATCH_PACKUW, MASK_PACKUW)
 DECLARE_INSN(bfpw, MATCH_BFPW, MASK_BFPW)
+// Crypto ISE - Begin
+DECLARE_INSN(sm4ed, MATCH_SM4ED, MASK_SM4ED)
+DECLARE_INSN(sm4ks, MATCH_SM4KS, MASK_SM4KS)
+DECLARE_INSN(aes32esmi, MATCH_AES32ESMI, MASK_AES32ESMI)
+DECLARE_INSN(aes32esi, MATCH_AES32ESI, MASK_AES32ESI)
+DECLARE_INSN(aes32dsmi, MATCH_AES32DSMI, MASK_AES32DSMI)
+DECLARE_INSN(aes32dsi, MATCH_AES32DSI, MASK_AES32DSI)
+DECLARE_INSN(aes64ks1i, MATCH_AES64KS1I, MASK_AES64KS1I)
+DECLARE_INSN(aes64ks2, MATCH_AES64KS2, MASK_AES64KS2)
+DECLARE_INSN(aes64im, MATCH_AES64IM, MASK_AES64IM)
+DECLARE_INSN(aes64esm, MATCH_AES64ESM, MASK_AES64ESM)
+DECLARE_INSN(aes64es, MATCH_AES64ES, MASK_AES64ES)
+DECLARE_INSN(aes64dsm, MATCH_AES64DSM, MASK_AES64DSM)
+DECLARE_INSN(aes64ds, MATCH_AES64DS, MASK_AES64DS)
+DECLARE_INSN(sha256sig0, MATCH_SHA256SIG0, MASK_SHA256SIG0)
+DECLARE_INSN(sha256sig1, MATCH_SHA256SIG1, MASK_SHA256SIG1)
+DECLARE_INSN(sha256sum0, MATCH_SHA256SUM0, MASK_SHA256SUM0)
+DECLARE_INSN(sha256sum1, MATCH_SHA256SUM1, MASK_SHA256SUM1)
+DECLARE_INSN(sm3p0, MATCH_SM3P0, MASK_SM3P0)
+DECLARE_INSN(sm3p1, MATCH_SM3P1, MASK_SM3P1)
+DECLARE_INSN(sha512sig0l, MATCH_SHA512SIG0L, MASK_SHA512SIG0L)
+DECLARE_INSN(sha512sig0h, MATCH_SHA512SIG0H, MASK_SHA512SIG0H)
+DECLARE_INSN(sha512sig1l, MATCH_SHA512SIG1L, MASK_SHA512SIG1L)
+DECLARE_INSN(sha512sig1h, MATCH_SHA512SIG1H, MASK_SHA512SIG1H)
+DECLARE_INSN(sha512sum0r, MATCH_SHA512SUM0R, MASK_SHA512SUM0R)
+DECLARE_INSN(sha512sum1r, MATCH_SHA512SUM1R, MASK_SHA512SUM1R)
+DECLARE_INSN(sha512sig0, MATCH_SHA512SIG0, MASK_SHA512SIG0)
+DECLARE_INSN(sha512sig1, MATCH_SHA512SIG1, MASK_SHA512SIG1)
+DECLARE_INSN(sha512sum0, MATCH_SHA512SUM0, MASK_SHA512SUM0)
+DECLARE_INSN(sha512sum1, MATCH_SHA512SUM1, MASK_SHA512SUM1)
+DECLARE_INSN(pollentropyi, MATCH_POLLENTROPYI, MASK_POLLENTROPYI)
+// Crypto ISE - End
 DECLARE_INSN(amoadd_w, MATCH_AMOADD_W, MASK_AMOADD_W)
 DECLARE_INSN(amoxor_w, MATCH_AMOXOR_W, MASK_AMOXOR_W)
 DECLARE_INSN(amoor_w, MATCH_AMOOR_W, MASK_AMOOR_W)
diff --git a/riscv/insns/aes32dsi.h b/riscv/insns/aes32dsi.h
new file mode 100644
index 0000000..c752526
--- /dev/null
+++ b/riscv/insns/aes32dsi.h
@@ -0,0 +1,16 @@
+
+#include "aes_common.h"
+
+require_rv32;
+
+uint8_t     bs = insn.bs();
+
+uint8_t     t0 = RS2 >> (8*bs);
+uint8_t      x = AES_DEC_SBOX[t0];
+uint32_t     u = x;
+
+u = (u << (8*bs)) | (u >> (32-8*bs));
+
+WRITE_RD(u ^ RS1);
+
+
diff --git a/riscv/insns/aes32dsmi.h b/riscv/insns/aes32dsmi.h
new file mode 100644
index 0000000..50a0738
--- /dev/null
+++ b/riscv/insns/aes32dsmi.h
@@ -0,0 +1,23 @@
+
+#include "aes_common.h"
+
+require_rv32;
+
+uint8_t     bs = insn.bs();
+
+uint8_t     t0 = RS2 >> (8*bs);
+uint8_t      x = AES_DEC_SBOX[t0];
+uint32_t     u ;
+
+u = (AES_GFMUL(x,0xb) << 24) |
+    (AES_GFMUL(x,0xd) << 16) |
+    (AES_GFMUL(x,0x9) <<  8) |
+    (AES_GFMUL(x,0xe) <<  0) ;
+
+u = (u << (8*bs)) | (u >> (32-8*bs));
+
+WRITE_RD(u ^ RS1);
+
+
+
+
diff --git a/riscv/insns/aes32esi.h b/riscv/insns/aes32esi.h
new file mode 100644
index 0000000..59d3d7e
--- /dev/null
+++ b/riscv/insns/aes32esi.h
@@ -0,0 +1,16 @@
+
+#include "aes_common.h"
+
+require_rv32;
+
+uint8_t     bs = insn.bs();
+
+uint8_t     t0 = RS2 >> (8*bs);
+uint8_t      x = AES_ENC_SBOX[t0];
+uint32_t     u = x;
+
+u = (u << (8*bs)) | (u >> (32-8*bs));
+
+WRITE_RD(u ^ RS1);
+
+
diff --git a/riscv/insns/aes32esmi.h b/riscv/insns/aes32esmi.h
new file mode 100644
index 0000000..ba96939
--- /dev/null
+++ b/riscv/insns/aes32esmi.h
@@ -0,0 +1,20 @@
+
+#include "aes_common.h"
+
+require_rv32;
+
+uint8_t     bs = insn.bs();
+
+uint8_t     t0 = RS2 >> (8*bs);
+uint8_t      x = AES_ENC_SBOX[t0];
+uint32_t     u ;
+
+u = (AES_GFMUL(x,3) << 24) |
+    (          x    << 16) |
+    (          x    <<  8) |
+    (AES_GFMUL(x,2) <<  0) ;
+
+u = (u << (8*bs)) | (u >> (32-8*bs));
+
+WRITE_RD(u ^ RS1);
+
diff --git a/riscv/insns/aes64ds.h b/riscv/insns/aes64ds.h
new file mode 100644
index 0000000..b833b39
--- /dev/null
+++ b/riscv/insns/aes64ds.h
@@ -0,0 +1,20 @@
+
+#include "aes_common.h"
+
+require_rv64;
+
+uint64_t temp = AES_INVSHIFROWS_LO(RS1,RS2);
+
+         temp = (
+    ((uint64_t)AES_DEC_SBOX[(temp >>  0) & 0xFF] <<  0) |
+    ((uint64_t)AES_DEC_SBOX[(temp >>  8) & 0xFF] <<  8) |
+    ((uint64_t)AES_DEC_SBOX[(temp >> 16) & 0xFF] << 16) |
+    ((uint64_t)AES_DEC_SBOX[(temp >> 24) & 0xFF] << 24) |
+    ((uint64_t)AES_DEC_SBOX[(temp >> 32) & 0xFF] << 32) |
+    ((uint64_t)AES_DEC_SBOX[(temp >> 40) & 0xFF] << 40) |
+    ((uint64_t)AES_DEC_SBOX[(temp >> 48) & 0xFF] << 48) |
+    ((uint64_t)AES_DEC_SBOX[(temp >> 56) & 0xFF] << 56) 
+);
+
+WRITE_RD(temp);
+
diff --git a/riscv/insns/aes64dsm.h b/riscv/insns/aes64dsm.h
new file mode 100644
index 0000000..6ebb117
--- /dev/null
+++ b/riscv/insns/aes64dsm.h
@@ -0,0 +1,29 @@
+
+#include "aes_common.h"
+
+require_rv64;
+
+uint64_t temp = AES_INVSHIFROWS_LO(RS1,RS2);
+
+         temp = (
+    ((uint64_t)AES_DEC_SBOX[(temp >>  0) & 0xFF] <<  0) |
+    ((uint64_t)AES_DEC_SBOX[(temp >>  8) & 0xFF] <<  8) |
+    ((uint64_t)AES_DEC_SBOX[(temp >> 16) & 0xFF] << 16) |
+    ((uint64_t)AES_DEC_SBOX[(temp >> 24) & 0xFF] << 24) |
+    ((uint64_t)AES_DEC_SBOX[(temp >> 32) & 0xFF] << 32) |
+    ((uint64_t)AES_DEC_SBOX[(temp >> 40) & 0xFF] << 40) |
+    ((uint64_t)AES_DEC_SBOX[(temp >> 48) & 0xFF] << 48) |
+    ((uint64_t)AES_DEC_SBOX[(temp >> 56) & 0xFF] << 56) 
+);
+
+uint32_t col_0 = temp & 0xFFFFFFFF;
+uint32_t col_1 = temp >> 32       ;
+
+         col_0 = AES_INVMIXCOLUMN(col_0);
+         col_1 = AES_INVMIXCOLUMN(col_1);
+
+uint64_t result= ((uint64_t)col_1 << 32) | col_0;
+
+WRITE_RD(result);
+
+
diff --git a/riscv/insns/aes64es.h b/riscv/insns/aes64es.h
new file mode 100644
index 0000000..32530c0
--- /dev/null
+++ b/riscv/insns/aes64es.h
@@ -0,0 +1,20 @@
+
+#include "aes_common.h"
+
+require_rv64;
+
+uint64_t temp = AES_SHIFROWS_LO(RS1,RS2);
+
+         temp = (
+    ((uint64_t)AES_ENC_SBOX[(temp >>  0) & 0xFF] <<  0) |
+    ((uint64_t)AES_ENC_SBOX[(temp >>  8) & 0xFF] <<  8) |
+    ((uint64_t)AES_ENC_SBOX[(temp >> 16) & 0xFF] << 16) |
+    ((uint64_t)AES_ENC_SBOX[(temp >> 24) & 0xFF] << 24) |
+    ((uint64_t)AES_ENC_SBOX[(temp >> 32) & 0xFF] << 32) |
+    ((uint64_t)AES_ENC_SBOX[(temp >> 40) & 0xFF] << 40) |
+    ((uint64_t)AES_ENC_SBOX[(temp >> 48) & 0xFF] << 48) |
+    ((uint64_t)AES_ENC_SBOX[(temp >> 56) & 0xFF] << 56) 
+);
+
+WRITE_RD(temp);
+
diff --git a/riscv/insns/aes64esm.h b/riscv/insns/aes64esm.h
new file mode 100644
index 0000000..88645f9
--- /dev/null
+++ b/riscv/insns/aes64esm.h
@@ -0,0 +1,28 @@
+
+#include "aes_common.h"
+
+require_rv64;
+
+uint64_t temp = AES_SHIFROWS_LO(RS1,RS2);
+
+         temp = (
+    ((uint64_t)AES_ENC_SBOX[(temp >>  0) & 0xFF] <<  0) |
+    ((uint64_t)AES_ENC_SBOX[(temp >>  8) & 0xFF] <<  8) |
+    ((uint64_t)AES_ENC_SBOX[(temp >> 16) & 0xFF] << 16) |
+    ((uint64_t)AES_ENC_SBOX[(temp >> 24) & 0xFF] << 24) |
+    ((uint64_t)AES_ENC_SBOX[(temp >> 32) & 0xFF] << 32) |
+    ((uint64_t)AES_ENC_SBOX[(temp >> 40) & 0xFF] << 40) |
+    ((uint64_t)AES_ENC_SBOX[(temp >> 48) & 0xFF] << 48) |
+    ((uint64_t)AES_ENC_SBOX[(temp >> 56) & 0xFF] << 56) 
+);
+
+uint32_t col_0 = temp & 0xFFFFFFFF;
+uint32_t col_1 = temp >> 32       ;
+
+         col_0 = AES_MIXCOLUMN(col_0);
+         col_1 = AES_MIXCOLUMN(col_1);
+
+uint64_t result= ((uint64_t)col_1 << 32) | col_0;
+
+WRITE_RD(result);
+
diff --git a/riscv/insns/aes64im.h b/riscv/insns/aes64im.h
new file mode 100644
index 0000000..754535e
--- /dev/null
+++ b/riscv/insns/aes64im.h
@@ -0,0 +1,15 @@
+
+#include "aes_common.h"
+
+require_rv64;
+
+uint32_t col_0 = RS1 & 0xFFFFFFFF;
+uint32_t col_1 = RS1 >> 32       ;
+
+         col_0 = AES_INVMIXCOLUMN(col_0);
+         col_1 = AES_INVMIXCOLUMN(col_1);
+
+uint64_t result= ((uint64_t)col_1 << 32) | col_0;
+
+WRITE_RD(result);
+
diff --git a/riscv/insns/aes64ks1i.h b/riscv/insns/aes64ks1i.h
new file mode 100644
index 0000000..172b5ed
--- /dev/null
+++ b/riscv/insns/aes64ks1i.h
@@ -0,0 +1,37 @@
+
+#include "aes_common.h"
+
+require_rv64;
+
+uint8_t     round_consts [10] = {
+    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36
+};
+
+uint8_t     enc_rcon          = insn.rcon() ;
+
+if(enc_rcon > 0xA) {
+    // Invalid opcode.
+    throw trap_illegal_instruction(0);
+}
+
+uint32_t    temp              = (RS1 >> 32) & 0xFFFFFFFF  ;
+uint8_t     rcon              = 0            ;
+uint64_t    result                           ;
+
+if(enc_rcon != 0xA) {
+    temp    = (temp >> 8) | (temp << 24); // Rotate left by 8
+    rcon    = round_consts[enc_rcon];
+}
+
+temp        =
+    ((uint32_t)AES_ENC_SBOX[(temp >> 24) & 0xFF] << 24) |
+    ((uint32_t)AES_ENC_SBOX[(temp >> 16) & 0xFF] << 16) |
+    ((uint32_t)AES_ENC_SBOX[(temp >>  8) & 0xFF] <<  8) |
+    ((uint32_t)AES_ENC_SBOX[(temp >>  0) & 0xFF] <<  0) ;
+
+temp       ^= rcon;
+
+result      = ((uint64_t)temp << 32) | temp;
+
+WRITE_RD(result);
+
diff --git a/riscv/insns/aes64ks2.h b/riscv/insns/aes64ks2.h
new file mode 100644
index 0000000..fcec177
--- /dev/null
+++ b/riscv/insns/aes64ks2.h
@@ -0,0 +1,15 @@
+
+#include "aes_common.h"
+
+require_rv64;
+
+uint32_t    rs1_hi  =  RS1 >> 32;
+uint32_t    rs2_lo  =  RS2      ;
+uint32_t    rs2_hi  =  RS2 >> 32;
+
+uint32_t    r_lo    = (rs1_hi ^ rs2_lo         ) ;
+uint32_t    r_hi    = (rs1_hi ^ rs2_lo ^ rs2_hi) ;
+uint64_t    result  =  ((uint64_t)r_hi << 32) | r_lo ;
+
+WRITE_RD(result);
+
diff --git a/riscv/insns/aes_common.h b/riscv/insns/aes_common.h
new file mode 100644
index 0000000..9cc353c
--- /dev/null
+++ b/riscv/insns/aes_common.h
@@ -0,0 +1,156 @@
+
+uint8_t AES_ENC_SBOX[]= {
+  0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5,
+  0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
+  0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0,
+  0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
+  0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC,
+  0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
+  0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A,
+  0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
+  0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0,
+  0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
+  0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B,
+  0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
+  0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85,
+  0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
+  0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5,
+  0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
+  0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17,
+  0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
+  0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88,
+  0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
+  0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C,
+  0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
+  0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9,
+  0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
+  0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6,
+  0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
+  0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E,
+  0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
+  0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94,
+  0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
+  0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68,
+  0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
+};
+
+uint8_t AES_DEC_SBOX[] = {
+  0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38,
+  0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
+  0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87,
+  0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
+  0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D,
+  0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
+  0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2,
+  0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
+  0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16,
+  0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
+  0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA,
+  0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
+  0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A,
+  0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
+  0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02,
+  0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
+  0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA,
+  0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
+  0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85,
+  0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
+  0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89,
+  0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
+  0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20,
+  0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
+  0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31,
+  0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
+  0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D,
+  0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
+  0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0,
+  0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
+  0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26,
+  0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
+};
+
+#define AES_UNPACK_BYTES(b0,b1,b2,b3) \
+    uint8_t  b0 = (RS1 >>  0) & 0xFF; \
+    uint8_t  b1 = (RS2 >>  8) & 0xFF; \
+    uint8_t  b2 = (RS1 >> 16) & 0xFF; \
+    uint8_t  b3 = (RS2 >> 24) & 0xFF; \
+
+#define AES_PACK_BYTES(b0,b1,b2,b3) ( \
+    (uint32_t)b0 <<  0  | \
+    (uint32_t)b1 <<  8  | \
+    (uint32_t)b2 << 16  | \
+    (uint32_t)b3 << 24  )
+
+#define AES_SBOX(b0, b1, b2, b3) \
+    b0 = AES_ENC_SBOX[b0]; \
+    b1 = AES_ENC_SBOX[b1]; \
+    b2 = AES_ENC_SBOX[b2]; \
+    b3 = AES_ENC_SBOX[b3]; \
+
+#define AES_RSBOX(b0, b1, b2, b3) \
+    b0 = AES_DEC_SBOX[b0]; \
+    b1 = AES_DEC_SBOX[b1]; \
+    b2 = AES_DEC_SBOX[b2]; \
+    b3 = AES_DEC_SBOX[b3]; \
+
+#define AES_XTIME(a) \
+    ((a << 1) ^ ((a&0x80) ? 0x1b : 0))
+
+#define AES_GFMUL(a,b) (( \
+    ( ( (b) & 0x1 ) ?                              (a)   : 0 ) ^ \
+    ( ( (b) & 0x2 ) ?                     AES_XTIME(a)   : 0 ) ^ \
+    ( ( (b) & 0x4 ) ?           AES_XTIME(AES_XTIME(a))  : 0 ) ^ \
+    ( ( (b) & 0x8 ) ? AES_XTIME(AES_XTIME(AES_XTIME(a))) : 0 ) )&0xFF)
+
+#define BY(X,I) ((X >> (8*I)) & 0xFF)
+
+#define AES_SHIFROWS_LO(RS1,RS2) ( \
+    (((RS1 >> 24) & 0xFF) << 56) | \
+    (((RS2 >> 48) & 0xFF) << 48) | \
+    (((RS2 >>  8) & 0xFF) << 40) | \
+    (((RS1 >> 32) & 0xFF) << 32) | \
+    (((RS2 >> 56) & 0xFF) << 24) | \
+    (((RS2 >> 16) & 0xFF) << 16) | \
+    (((RS1 >> 40) & 0xFF) <<  8) | \
+    (((RS1 >>  0) & 0xFF) <<  0) ) 
+
+#define AES_INVSHIFROWS_LO(RS1,RS2) ( \
+    (((RS2 >> 24) & 0xFF) << 56) | \
+    (((RS2 >> 48) & 0xFF) << 48) | \
+    (((RS1 >>  8) & 0xFF) << 40) | \
+    (((RS1 >> 32) & 0xFF) << 32) | \
+    (((RS1 >> 56) & 0xFF) << 24) | \
+    (((RS2 >> 16) & 0xFF) << 16) | \
+    (((RS2 >> 40) & 0xFF) <<  8) | \
+    (((RS1 >>  0) & 0xFF) <<  0) ) 
+
+
+#define AES_MIXBYTE(COL,B0,B1,B2,B3) ( \
+              BY(COL,B3)     ^ \
+              BY(COL,B2)     ^ \
+    AES_GFMUL(BY(COL,B1), 3) ^ \
+    AES_GFMUL(BY(COL,B0), 2)   \
+)
+
+#define AES_MIXCOLUMN(COL) ( \
+    AES_MIXBYTE(COL,3,0,1,2) << 24 | \
+    AES_MIXBYTE(COL,2,3,0,1) << 16 | \
+    AES_MIXBYTE(COL,1,2,3,0) <<  8 | \
+    AES_MIXBYTE(COL,0,1,2,3) <<  0   \
+)
+
+
+#define AES_INVMIXBYTE(COL,B0,B1,B2,B3) ( \
+    AES_GFMUL(BY(COL,B3),0x9) ^ \
+    AES_GFMUL(BY(COL,B2),0xd) ^ \
+    AES_GFMUL(BY(COL,B1),0xb) ^ \
+    AES_GFMUL(BY(COL,B0),0xe)   \
+)
+
+#define AES_INVMIXCOLUMN(COL) ( \
+    AES_INVMIXBYTE(COL,3,0,1,2) << 24 | \
+    AES_INVMIXBYTE(COL,2,3,0,1) << 16 | \
+    AES_INVMIXBYTE(COL,1,2,3,0) <<  8 | \
+    AES_INVMIXBYTE(COL,0,1,2,3) <<  0   \
+)
+
diff --git a/riscv/insns/pollentropyi.h b/riscv/insns/pollentropyi.h
new file mode 100644
index 0000000..ce23097
--- /dev/null
+++ b/riscv/insns/pollentropyi.h
@@ -0,0 +1,4 @@
+
+//
+// TODO
+//
diff --git a/riscv/insns/sha256sig0.h b/riscv/insns/sha256sig0.h
new file mode 100644
index 0000000..af3d413
--- /dev/null
+++ b/riscv/insns/sha256sig0.h
@@ -0,0 +1,11 @@
+
+#define ROR32(a,amt) ((a << (-amt & (32-1))) | (a >> (amt & (32-1))))
+
+uint32_t a = RS1;
+
+WRITE_RD(
+    ROR32(a, 7) ^ ROR32(a,18) ^ (a >> 3)
+);
+
+#undef ROR32
+
diff --git a/riscv/insns/sha256sig1.h b/riscv/insns/sha256sig1.h
new file mode 100644
index 0000000..882a3e0
--- /dev/null
+++ b/riscv/insns/sha256sig1.h
@@ -0,0 +1,11 @@
+
+#define ROR32(a,amt) ((a << (-amt & (32-1))) | (a >> (amt & (32-1))))
+
+uint32_t a = RS1;
+
+WRITE_RD(
+    ROR32(a, 17) ^ ROR32(a,19) ^ (a >> 10)
+);
+
+#undef ROR32
+
diff --git a/riscv/insns/sha256sum0.h b/riscv/insns/sha256sum0.h
new file mode 100644
index 0000000..4afbeec
--- /dev/null
+++ b/riscv/insns/sha256sum0.h
@@ -0,0 +1,11 @@
+
+#define ROR32(a,amt) ((a << (-amt & (32-1))) | (a >> (amt & (32-1))))
+
+uint32_t a = RS1;
+
+WRITE_RD(
+    ROR32(a, 2) ^ ROR32(a,13) ^ ROR32(a, 22)
+);
+
+#undef ROR32
+
diff --git a/riscv/insns/sha256sum1.h b/riscv/insns/sha256sum1.h
new file mode 100644
index 0000000..b91d3ab
--- /dev/null
+++ b/riscv/insns/sha256sum1.h
@@ -0,0 +1,11 @@
+
+#define ROR32(a,amt) ((a << (-amt & (32-1))) | (a >> (amt & (32-1))))
+
+uint32_t a = RS1;
+
+WRITE_RD(
+    ROR32(a, 6) ^ ROR32(a,11) ^ ROR32(a, 25)
+);
+
+#undef ROR32
+
diff --git a/riscv/insns/sha512sig0.h b/riscv/insns/sha512sig0.h
new file mode 100644
index 0000000..0b490b0
--- /dev/null
+++ b/riscv/insns/sha512sig0.h
@@ -0,0 +1,12 @@
+require_rv64;
+
+#define ROR64(a,amt) ((a << (-amt & (64-1))) | (a >> (amt & (64-1))))
+
+uint64_t a = RS1;
+
+WRITE_RD(
+    ROR64(a,  1) ^ ROR64(a, 8) ^ (a >>  7)
+);
+
+#undef ROR64
+
diff --git a/riscv/insns/sha512sig0h.h b/riscv/insns/sha512sig0h.h
new file mode 100644
index 0000000..f2b8b8d
--- /dev/null
+++ b/riscv/insns/sha512sig0h.h
@@ -0,0 +1,8 @@
+
+require_rv32;
+
+uint32_t result =
+    ((uint32_t)RS1 >>  1) ^ ((uint32_t)RS1 >>  7) ^ ((uint32_t)RS1 >>  8) ^
+    ((uint32_t)RS2 << 31) ^                         ((uint32_t)RS2 << 24);
+
+WRITE_RD(zext_xlen(result));
diff --git a/riscv/insns/sha512sig0l.h b/riscv/insns/sha512sig0l.h
new file mode 100644
index 0000000..d7a855e
--- /dev/null
+++ b/riscv/insns/sha512sig0l.h
@@ -0,0 +1,8 @@
+
+require_rv32;
+
+uint32_t result =
+    ((uint32_t)RS1 >>  1) ^ ((uint32_t)RS1 >>  7) ^ ((uint32_t)RS1 >>  8) ^
+    ((uint32_t)RS2 << 31) ^ ((uint32_t)RS2 << 25) ^ ((uint32_t)RS2 << 24);
+
+WRITE_RD(zext_xlen(result));
diff --git a/riscv/insns/sha512sig1.h b/riscv/insns/sha512sig1.h
new file mode 100644
index 0000000..ab66c6a
--- /dev/null
+++ b/riscv/insns/sha512sig1.h
@@ -0,0 +1,12 @@
+require_rv64;
+
+#define ROR64(a,amt) ((a << (-amt & (64-1))) | (a >> (amt & (64-1))))
+
+uint64_t a = RS1;
+
+WRITE_RD(
+    ROR64(a, 19) ^ ROR64(a,61) ^ (a >>  6)
+);
+
+#undef ROR64
+
diff --git a/riscv/insns/sha512sig1h.h b/riscv/insns/sha512sig1h.h
new file mode 100644
index 0000000..78e7d2a
--- /dev/null
+++ b/riscv/insns/sha512sig1h.h
@@ -0,0 +1,8 @@
+
+require_rv32;
+
+uint32_t result =
+    ((uint32_t)RS1 <<  3) ^ ((uint32_t)RS1 >>  6) ^ ((uint32_t)RS1 >> 19) ^
+    ((uint32_t)RS2 >> 29) ^                         ((uint32_t)RS2 << 13);
+
+WRITE_RD(zext_xlen(result));
diff --git a/riscv/insns/sha512sig1l.h b/riscv/insns/sha512sig1l.h
new file mode 100644
index 0000000..87569e8
--- /dev/null
+++ b/riscv/insns/sha512sig1l.h
@@ -0,0 +1,8 @@
+
+require_rv32;
+
+uint32_t result =
+    ((uint32_t)RS1 <<  3) ^ ((uint32_t)RS1 >>  6) ^ ((uint32_t)RS1 >> 19) ^
+    ((uint32_t)RS2 >> 29) ^ ((uint32_t)RS2 << 26) ^ ((uint32_t)RS2 << 13);
+
+WRITE_RD(zext_xlen(result));
diff --git a/riscv/insns/sha512sum0.h b/riscv/insns/sha512sum0.h
new file mode 100644
index 0000000..ad2dc89
--- /dev/null
+++ b/riscv/insns/sha512sum0.h
@@ -0,0 +1,12 @@
+require_rv64;
+
+#define ROR64(a,amt) ((a << (-amt & (64-1))) | (a >> (amt & (64-1))))
+
+uint64_t a = RS1;
+
+WRITE_RD(
+    ROR64(a, 28) ^ ROR64(a,34) ^ ROR64(a,39)
+);
+
+#undef ROR64
+
diff --git a/riscv/insns/sha512sum0r.h b/riscv/insns/sha512sum0r.h
new file mode 100644
index 0000000..4294c3c
--- /dev/null
+++ b/riscv/insns/sha512sum0r.h
@@ -0,0 +1,8 @@
+
+require_rv32;
+
+uint32_t result =
+    ((uint32_t)RS1 << 25) ^ ((uint32_t)RS1 << 30) ^ ((uint32_t)RS1 >> 28) ^
+    ((uint32_t)RS2 >>  7) ^ ((uint32_t)RS2 >>  2) ^ ((uint32_t)RS2 <<  4);
+
+WRITE_RD(zext_xlen(result));
diff --git a/riscv/insns/sha512sum1.h b/riscv/insns/sha512sum1.h
new file mode 100644
index 0000000..a2e555b
--- /dev/null
+++ b/riscv/insns/sha512sum1.h
@@ -0,0 +1,12 @@
+require_rv64;
+
+#define ROR64(a,amt) ((a << (-amt & (64-1))) | (a >> (amt & (64-1))))
+
+uint64_t a = RS1;
+
+WRITE_RD(
+    ROR64(a, 14) ^ ROR64(a, 18) ^ ROR64(a, 41)
+);
+
+#undef ROR64
+
diff --git a/riscv/insns/sha512sum1r.h b/riscv/insns/sha512sum1r.h
new file mode 100644
index 0000000..698780e
--- /dev/null
+++ b/riscv/insns/sha512sum1r.h
@@ -0,0 +1,8 @@
+
+require_rv32;
+
+uint32_t result =
+    ((uint32_t)RS1 << 23) ^ ((uint32_t)RS1 >> 14) ^ ((uint32_t)RS1 >> 18) ^
+    ((uint32_t)RS2 >>  9) ^ ((uint32_t)RS2 << 18) ^ ((uint32_t)RS2 << 14);
+
+WRITE_RD(result);
diff --git a/riscv/insns/sm3p0.h b/riscv/insns/sm3p0.h
new file mode 100644
index 0000000..276d47a
--- /dev/null
+++ b/riscv/insns/sm3p0.h
@@ -0,0 +1,12 @@
+
+#define ROL32(a,amt) ((a >> (-amt & (32-1))) | (a << (amt & (32-1))))
+
+uint32_t src    = RS1;
+uint32_t result = src ^ ROL32(src, 9) ^ ROL32(src, 17);
+
+WRITE_RD(
+    zext_xlen(result)
+);
+
+#undef ROR32
+
diff --git a/riscv/insns/sm3p1.h b/riscv/insns/sm3p1.h
new file mode 100644
index 0000000..4c0a82e
--- /dev/null
+++ b/riscv/insns/sm3p1.h
@@ -0,0 +1,12 @@
+
+#define ROL32(a,amt) ((a >> (-amt & (32-1))) | (a << (amt & (32-1))))
+
+uint32_t src    = RS1;
+uint32_t result = src ^ ROL32(src, 15) ^ ROL32(src, 23);
+
+WRITE_RD(
+    zext_xlen(result)
+);
+
+#undef ROR32
+
diff --git a/riscv/insns/sm4_common.h b/riscv/insns/sm4_common.h
new file mode 100644
index 0000000..17f129f
--- /dev/null
+++ b/riscv/insns/sm4_common.h
@@ -0,0 +1,27 @@
+
+// SM4 forward SBox. SM4 has no inverse sbox.
+static const uint8_t sm4_sbox[256] = {
+	0xD6, 0x90, 0xE9, 0xFE, 0xCC, 0xE1, 0x3D, 0xB7, 0x16, 0xB6, 0x14, 0xC2,
+	0x28, 0xFB, 0x2C, 0x05, 0x2B, 0x67, 0x9A, 0x76, 0x2A, 0xBE, 0x04, 0xC3,
+	0xAA, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99, 0x9C, 0x42, 0x50, 0xF4,
+	0x91, 0xEF, 0x98, 0x7A, 0x33, 0x54, 0x0B, 0x43, 0xED, 0xCF, 0xAC, 0x62,
+	0xE4, 0xB3, 0x1C, 0xA9, 0xC9, 0x08, 0xE8, 0x95, 0x80, 0xDF, 0x94, 0xFA,
+	0x75, 0x8F, 0x3F, 0xA6, 0x47, 0x07, 0xA7, 0xFC, 0xF3, 0x73, 0x17, 0xBA,
+	0x83, 0x59, 0x3C, 0x19, 0xE6, 0x85, 0x4F, 0xA8, 0x68, 0x6B, 0x81, 0xB2,
+	0x71, 0x64, 0xDA, 0x8B, 0xF8, 0xEB, 0x0F, 0x4B, 0x70, 0x56, 0x9D, 0x35,
+	0x1E, 0x24, 0x0E, 0x5E, 0x63, 0x58, 0xD1, 0xA2, 0x25, 0x22, 0x7C, 0x3B,
+	0x01, 0x21, 0x78, 0x87, 0xD4, 0x00, 0x46, 0x57, 0x9F, 0xD3, 0x27, 0x52,
+	0x4C, 0x36, 0x02, 0xE7, 0xA0, 0xC4, 0xC8, 0x9E, 0xEA, 0xBF, 0x8A, 0xD2,
+	0x40, 0xC7, 0x38, 0xB5, 0xA3, 0xF7, 0xF2, 0xCE, 0xF9, 0x61, 0x15, 0xA1,
+	0xE0, 0xAE, 0x5D, 0xA4, 0x9B, 0x34, 0x1A, 0x55, 0xAD, 0x93, 0x32, 0x30,
+	0xF5, 0x8C, 0xB1, 0xE3, 0x1D, 0xF6, 0xE2, 0x2E, 0x82, 0x66, 0xCA, 0x60,
+	0xC0, 0x29, 0x23, 0xAB, 0x0D, 0x53, 0x4E, 0x6F, 0xD5, 0xDB, 0x37, 0x45,
+	0xDE, 0xFD, 0x8E, 0x2F, 0x03, 0xFF, 0x6A, 0x72, 0x6D, 0x6C, 0x5B, 0x51,
+	0x8D, 0x1B, 0xAF, 0x92, 0xBB, 0xDD, 0xBC, 0x7F, 0x11, 0xD9, 0x5C, 0x41,
+	0x1F, 0x10, 0x5A, 0xD8, 0x0A, 0xC1, 0x31, 0x88, 0xA5, 0xCD, 0x7B, 0xBD,
+	0x2D, 0x74, 0xD0, 0x12, 0xB8, 0xE5, 0xB4, 0xB0, 0x89, 0x69, 0x97, 0x4A,
+	0x0C, 0x96, 0x77, 0x7E, 0x65, 0xB9, 0xF1, 0x09, 0xC5, 0x6E, 0xC6, 0x84,
+	0x18, 0xF0, 0x7D, 0xEC, 0x3A, 0xDC, 0x4D, 0x20, 0x79, 0xEE, 0x5F, 0x3E,
+	0xD7, 0xCB, 0x39, 0x48
+};
+
diff --git a/riscv/insns/sm4ed.h b/riscv/insns/sm4ed.h
new file mode 100644
index 0000000..8ce8651
--- /dev/null
+++ b/riscv/insns/sm4ed.h
@@ -0,0 +1,20 @@
+
+#include "sm4_common.h"
+
+uint8_t  bs     = insn.bs();
+
+uint32_t sb_in  = (RS2 >> (8*bs)) & 0xFF;
+uint32_t sb_out = (uint32_t)sm4_sbox[sb_in];
+
+uint32_t linear = sb_out ^  (sb_out         <<  8) ^ 
+                            (sb_out         <<  2) ^
+                            (sb_out         << 18) ^
+                           ((sb_out & 0x3f) << 26) ^
+                           ((sb_out & 0xC0) << 10) ;
+
+uint32_t rotl   = (linear << (8*bs)) | (linear >> (32-8*bs));
+
+uint32_t result = rotl ^ RS1;
+
+WRITE_RD(zext_xlen(result));
+
diff --git a/riscv/insns/sm4ks.h b/riscv/insns/sm4ks.h
new file mode 100644
index 0000000..e638a31
--- /dev/null
+++ b/riscv/insns/sm4ks.h
@@ -0,0 +1,18 @@
+
+#include "sm4_common.h"
+
+uint8_t  bs     = insn.bs();
+
+uint32_t sb_in  = (RS2 >> (8*bs)) & 0xFF;
+uint32_t sb_out = sm4_sbox[sb_in];
+
+uint32_t x      = sb_out ^
+    ((sb_out & 0x07) << 29) ^ ((sb_out & 0xFE) <<  7) ^
+    ((sb_out & 0x01) << 23) ^ ((sb_out & 0xF8) << 13) ;
+
+uint32_t rotl   = (x << (8*bs)) | (x >> (32-8*bs));
+
+uint32_t result = rotl ^ RS1;
+
+WRITE_RD(zext_xlen(result));
+
diff --git a/riscv/riscv.mk.in b/riscv/riscv.mk.in
index 4ee64fa..a7aa11d 100644
--- a/riscv/riscv.mk.in
+++ b/riscv/riscv.mk.in
@@ -772,6 +772,37 @@ riscv_insn_priv = \
 	sret \
 	wfi \
 
+riscv_insn_crypto = \
+    aes32esmi \
+    aes32esi \
+    aes32dsmi \
+    aes32dsi \
+    sm4ed \
+    sm4ks \
+    sm3p0 \
+    sm3p1 \
+    aes64ks1i \
+    aes64ks2 \
+    aes64im \
+    aes64esm \
+    aes64es \
+    aes64dsm \
+    aes64ds \
+    sha256sig0 \
+    sha256sig1 \
+    sha256sum0 \
+    sha256sum1 \
+    sha512sig0l \
+    sha512sig0h \
+    sha512sig1l \
+    sha512sig1h \
+    sha512sum0r \
+    sha512sum1r \
+    sha512sig0 \
+    sha512sig1 \
+    sha512sum0 \
+    sha512sum1 \
+    pollentropyi
 
 riscv_insn_list = \
 	$(riscv_insn_ext_a) \
@@ -784,6 +815,7 @@ riscv_insn_list = \
 	$(riscv_insn_ext_b) \
 	$(if $(HAVE_INT128),$(riscv_insn_ext_v),) \
 	$(riscv_insn_priv) \
+	$(riscv_insn_crypto)
 
 riscv_gen_srcs = \
 	$(addsuffix .cc,$(riscv_insn_list))
