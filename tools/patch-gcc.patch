diff --git a/gcc/common/config/riscv/riscv-common.c b/gcc/common/config/riscv/riscv-common.c
index 91bc47f774c..771186a50d5 100644
--- a/gcc/common/config/riscv/riscv-common.c
+++ b/gcc/common/config/riscv/riscv-common.c
@@ -203,6 +203,30 @@ riscv_supported_std_ext (void)
   return "mafdqlcbjtpvn";
 }
 
+/* A list of known standard Z prefix extensions */
+const char * const riscv_std_z_ext_strtab[] =
+{
+ "zscrypto",
+ NULL
+};
+
+/* Check if the supplied null-terminated string is one of the supported
+   standard Z extensions */
+static bool
+riscv_check_is_supported_z_ext (const char * ext)
+{
+  for (size_t i = 0; riscv_std_z_ext_strtab [i]; ++i)
+  {
+      if (!strcmp (ext, riscv_std_z_ext_strtab[i]))
+      {
+    	return true;
+      }
+  }
+
+  return false;
+}
+
+
 /* Parsing subset version.
 
    Return Value:
@@ -357,7 +381,7 @@ riscv_subset_list::parse_std_ext (const char *p)
     {
       char subset[2] = {0, 0};
 
-      if (*p == 'x' || *p == 's')
+      if (*p == 'x' || *p == 's' || *p == 'z')
 	break;
 
       if (*p == '_')
@@ -406,7 +430,7 @@ riscv_subset_list::parse_std_ext (const char *p)
 
    Arguments:
      `p`: Current parsing position.
-     `ext_type`: What kind of extensions, 'x', 's' or 'sx'.
+     `ext_type`: What kind of extensions: 'z', 'x', 's' or 'sx'.
      `ext_type_str`: Full name for kind of extension.  */
 
 const char *
@@ -449,6 +473,19 @@ riscv_subset_list::parse_sv_or_non_std_ext (const char *p,
 
       *q = '\0';
 
+      if(ext_type[0] == 'z')
+      {
+        bool is_supported_z_ext = riscv_check_is_supported_z_ext(subset);
+
+        if(!is_supported_z_ext)
+        {
+          error_at (m_loc, "Unknown standard %s extension '%s'",
+                ext_type, subset);
+          return NULL;
+        }
+
+      }
+
       add (subset, major_version, minor_version);
       free (subset);
       p += end_of_version - subset;
@@ -491,6 +528,12 @@ riscv_subset_list::parse (const char *arch, location_t loc)
   /* Parsing standard extension.  */
   p = subset_list->parse_std_ext (p);
 
+  if (p == NULL)
+    goto fail;
+
+  /* Parsing standard Z extensions.  */
+  p = subset_list->parse_sv_or_non_std_ext (p, "z", "standard extension");
+
   if (p == NULL)
     goto fail;
 
