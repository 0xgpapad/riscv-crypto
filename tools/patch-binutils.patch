diff --git a/gas/config/tc-riscv.c b/gas/config/tc-riscv.c
index 9ecdcab0b6..1834f7c08b 100644
--- a/gas/config/tc-riscv.c
+++ b/gas/config/tc-riscv.c
@@ -680,7 +680,7 @@ validate_riscv_insn (const struct riscv_opcode *opc, int length)
       case 'R':	USE_BITS (OP_MASK_RS3,		OP_SH_RS3);	break;
       case 'S':	USE_BITS (OP_MASK_RS1,		OP_SH_RS1);	break;
       case 'U':	USE_BITS (OP_MASK_RS1,		OP_SH_RS1);	/* fallthru */
-      case 'T':	USE_BITS (OP_MASK_RS2,		OP_SH_RS2);	break;
+      case 'T':	USE_BITS (OP_MASK_RS2,		OP_SH_RS2);	break; /* Crypto ISE */
       case 'd':	USE_BITS (OP_MASK_RD,		OP_SH_RD);	break;
       case 'm':	USE_BITS (OP_MASK_RM,		OP_SH_RM);	break;
       case 's':	USE_BITS (OP_MASK_RS1,		OP_SH_RS1);	break;
@@ -688,6 +688,8 @@ validate_riscv_insn (const struct riscv_opcode *opc, int length)
       case 'r':	USE_BITS (OP_MASK_RS3,          OP_SH_RS3);     break;
       case 'P':	USE_BITS (OP_MASK_PRED,		OP_SH_PRED); break;
       case 'Q':	USE_BITS (OP_MASK_SUCC,		OP_SH_SUCC); break;
+      case 'w':	USE_BITS (OP_MASK_BS  ,		OP_SH_BS  ); break; /* Crypto ISE */
+      case 'W':	USE_BITS (OP_MASK_RCON,		OP_SH_RCON); break; /* Crypto ISE */
       case 'o':
       case 'j': used_bits |= ENCODE_ITYPE_IMM (-1U); break;
       case 'a':	used_bits |= ENCODE_UJTYPE_IMM (-1U); break;
@@ -2000,6 +2002,27 @@ rvc_lui:
 		  continue;
 		}
 	      break;
+        
+        /* Crypto ISE - Begin */
+        case 'w': /* BS */
+	        my_getExpression (imm_expr, s);
+	        check_absolute_expr (ip, imm_expr, FALSE);
+            if(imm_expr->X_add_number > 3){as_bad(_("Crypto ISE: 0 <= Byte Select <= 3"));}
+            INSERT_OPERAND(BS,*ip,imm_expr->X_add_number & 0x3);
+            imm_expr->X_op = O_absent;
+            s = expr_end;
+            continue;
+        
+        case 'W': /* RCON  */
+	        my_getExpression (imm_expr, s);
+	        check_absolute_expr (ip, imm_expr, FALSE);
+            if(imm_expr->X_add_number > 10){as_bad(_("Crypto ISE: 0 <= rcon <= 10"));}
+            INSERT_OPERAND(RCON,*ip,imm_expr->X_add_number & 0xF);
+            imm_expr->X_op = O_absent;
+            s = expr_end;
+            continue;
+        
+        /* Crypto ISE - End */
 
 	    case 'd':		/* Destination register.  */
 	    case 's':		/* Source register.  */
diff --git a/include/opcode/riscv-opc.h b/include/opcode/riscv-opc.h
index 6c750a33b1..2748204cf2 100644
--- a/include/opcode/riscv-opc.h
+++ b/include/opcode/riscv-opc.h
@@ -343,6 +343,68 @@
 #define MASK_GORCIW  0xfe00707f
 #define MATCH_GREVIW 0x6800501b
 #define MASK_GREVIW  0xfe00707f
+// Crypto ISE - Begin
+#define MATCH_SSM4_ED 0x800302b
+#define MASK_SSM4_ED 0x3e00707f
+#define MATCH_SSM4_KS 0xa00302b
+#define MASK_SSM4_KS 0x3e00707f
+#define MATCH_SAES32_ENCSM 0x202b
+#define MASK_SAES32_ENCSM 0x3e00707f
+#define MATCH_SAES32_ENCS 0x200202b
+#define MASK_SAES32_ENCS 0x3e00707f
+#define MATCH_SAES32_DECSM 0x400202b
+#define MASK_SAES32_DECSM 0x3e00707f
+#define MATCH_SAES32_DECS 0x600202b
+#define MASK_SAES32_DECS 0x3e00707f
+#define MATCH_SAES64_KS1 0x800202b
+#define MASK_SAES64_KS1 0xff00707f
+#define MATCH_SAES64_KS2 0xa00202b
+#define MASK_SAES64_KS2 0xfe00707f
+#define MATCH_SAES64_IMIX 0xc10202b
+#define MASK_SAES64_IMIX 0xfff0707f
+#define MATCH_SAES64_ENCSM 0xe00202b
+#define MASK_SAES64_ENCSM 0xfe00707f
+#define MATCH_SAES64_ENCS 0x1000202b
+#define MASK_SAES64_ENCS 0xfe00707f
+#define MATCH_SAES64_DECSM 0x1200202b
+#define MASK_SAES64_DECSM 0xfe00707f
+#define MATCH_SAES64_DECS 0x1400202b
+#define MASK_SAES64_DECS 0xfe00707f
+#define MATCH_SSHA256_SIG0 0xe00702b
+#define MASK_SSHA256_SIG0 0xfff0707f
+#define MATCH_SSHA256_SIG1 0xe10702b
+#define MASK_SSHA256_SIG1 0xfff0707f
+#define MATCH_SSHA256_SUM0 0xe20702b
+#define MASK_SSHA256_SUM0 0xfff0707f
+#define MATCH_SSHA256_SUM1 0xe30702b
+#define MASK_SSHA256_SUM1 0xfff0707f
+#define MATCH_SSM3_P0 0xe80702b
+#define MASK_SSM3_P0 0xfff0707f
+#define MATCH_SSM3_P1 0xe90702b
+#define MASK_SSM3_P1 0xfff0707f
+#define MATCH_SSHA512_SIG0L 0x1000702b
+#define MASK_SSHA512_SIG0L 0xfe00707f
+#define MATCH_SSHA512_SIG0H 0x1200702b
+#define MASK_SSHA512_SIG0H 0xfe00707f
+#define MATCH_SSHA512_SIG1L 0x1400702b
+#define MASK_SSHA512_SIG1L 0xfe00707f
+#define MATCH_SSHA512_SIG1H 0x1600702b
+#define MASK_SSHA512_SIG1H 0xfe00707f
+#define MATCH_SSHA512_SUM0R 0x1800702b
+#define MASK_SSHA512_SUM0R 0xfe00707f
+#define MATCH_SSHA512_SUM1R 0x1a00702b
+#define MASK_SSHA512_SUM1R 0xfe00707f
+#define MATCH_SSHA512_SIG0 0xe40702b
+#define MASK_SSHA512_SIG0 0xfff0707f
+#define MATCH_SSHA512_SIG1 0xe50702b
+#define MASK_SSHA512_SIG1 0xfff0707f
+#define MATCH_SSHA512_SUM0 0xe60702b
+#define MASK_SSHA512_SUM0 0xfff0707f
+#define MATCH_SSHA512_SUM1 0xe70702b
+#define MASK_SSHA512_SUM1 0xfff0707f
+#define MATCH_POLLENTROPY 0xe05702b
+#define MASK_POLLENTROPY 0xfe0ff07f
+// Crypto ISE - end
 #define MATCH_FSLW 0x400103b
 #define MASK_FSLW  0x600707f
 #define MATCH_FSRW 0x400503b
diff --git a/include/opcode/riscv.h b/include/opcode/riscv.h
index 7e67c7f9a2..2601217a7e 100644
--- a/include/opcode/riscv.h
+++ b/include/opcode/riscv.h
@@ -223,6 +223,13 @@ static const char * const riscv_pred_succ[16] =
 #define OP_MASK_RL		0x1
 #define OP_SH_RL		25
 
+/* Crypto ISE - Begin */
+#define OP_SH_BS        30
+#define OP_MASK_BS      3 
+#define OP_SH_RCON      20
+#define OP_MASK_RCON    0xF 
+/* Crypto ISE - End */
+
 #define OP_MASK_CUSTOM_IMM	0x7f
 #define OP_SH_CUSTOM_IMM	25
 #define OP_MASK_CSR		0xfff
diff --git a/opcodes/riscv-dis.c b/opcodes/riscv-dis.c
index 19f10c0e55..7506f2bc80 100644
--- a/opcodes/riscv-dis.c
+++ b/opcodes/riscv-dis.c
@@ -296,6 +296,17 @@ print_insn_args (const char *d, insn_t l, bfd_vma pc, disassemble_info *info)
 	    pd->hi_addr[rd] = EXTRACT_RVC_LUI_IMM (l);
 	  print (info->stream, "%s", riscv_gpr_names[rd]);
 	  break;
+    
+    /* Crypto ISE - Begin */
+    case 'w': /*BS*/
+	  print (info->stream, "0x%x", (int)EXTRACT_OPERAND (BS, l));
+	  break;
+    
+    case 'W': /* RCON */
+	  print (info->stream, "0x%x", (int)EXTRACT_OPERAND (RCON, l));
+	  break;
+    
+    /* Crypto ISE - End*/
 
 	case 'z':
 	  print (info->stream, "%s", riscv_gpr_names[0]);
diff --git a/opcodes/riscv-opc.c b/opcodes/riscv-opc.c
index e99febc823..4b94e79658 100644
--- a/opcodes/riscv-opc.c
+++ b/opcodes/riscv-opc.c
@@ -709,6 +709,38 @@ const struct riscv_opcode riscv_opcodes[] =
 {"unzip2",    0, INSN_CLASS_B_OR_ZBP,   "d,s",  0, (int) M_PERM, match_never, INSN_MACRO },
 {"unzip",     0, INSN_CLASS_B_OR_ZBP,   "d,s",  0, (int) M_PERM, match_never, INSN_MACRO },
 
+/* Scalar Crypto Instructions */
+{"ssm4.ed"      , 0, INSN_CLASS_I,  "d,s,t,w", MATCH_SSM4_ED, MASK_SSM4_ED, match_opcode, 0},
+{"ssm4.ks"      , 0, INSN_CLASS_I,  "d,s,t,w", MATCH_SSM4_KS, MASK_SSM4_KS, match_opcode, 0},
+{"saes32.encsm" , 0, INSN_CLASS_I,  "d,s,t,w", MATCH_SAES32_ENCSM, MASK_SAES32_ENCSM, match_opcode, 0},
+{"saes32.encs"  , 0, INSN_CLASS_I,  "d,s,t,w", MATCH_SAES32_ENCS, MASK_SAES32_ENCS, match_opcode, 0},
+{"saes32.decsm" , 0, INSN_CLASS_I,  "d,s,t,w", MATCH_SAES32_DECSM, MASK_SAES32_DECSM, match_opcode, 0},
+{"saes32.decs"  , 0, INSN_CLASS_I,  "d,s,t,w", MATCH_SAES32_DECS, MASK_SAES32_DECS, match_opcode, 0},
+{"saes64.ks1"   ,64, INSN_CLASS_I,    "d,s,W", MATCH_SAES64_KS1, MASK_SAES64_KS1, match_opcode, 0},
+{"saes64.ks2"   ,64, INSN_CLASS_I,    "d,s,t", MATCH_SAES64_KS2, MASK_SAES64_KS2, match_opcode, 0},
+{"saes64.imix"  ,64, INSN_CLASS_I,      "d,s", MATCH_SAES64_IMIX, MASK_SAES64_IMIX, match_opcode, 0},
+{"saes64.encsm" ,64, INSN_CLASS_I,    "d,s,t", MATCH_SAES64_ENCSM, MASK_SAES64_ENCSM, match_opcode, 0},
+{"saes64.encs"  ,64, INSN_CLASS_I,    "d,s,t", MATCH_SAES64_ENCS, MASK_SAES64_ENCS, match_opcode, 0},
+{"saes64.decsm" ,64, INSN_CLASS_I,    "d,s,t", MATCH_SAES64_DECSM, MASK_SAES64_DECSM, match_opcode, 0},
+{"saes64.decs"  ,64, INSN_CLASS_I,    "d,s,t", MATCH_SAES64_DECS, MASK_SAES64_DECS, match_opcode, 0},
+{"ssha256.sig0" , 0, INSN_CLASS_I,      "d,s", MATCH_SSHA256_SIG0, MASK_SSHA256_SIG0, match_opcode, 0},
+{"ssha256.sig1" , 0, INSN_CLASS_I,      "d,s", MATCH_SSHA256_SIG1, MASK_SSHA256_SIG1, match_opcode, 0},
+{"ssha256.sum0" , 0, INSN_CLASS_I,      "d,s", MATCH_SSHA256_SUM0, MASK_SSHA256_SUM0, match_opcode, 0},
+{"ssha256.sum1" , 0, INSN_CLASS_I,      "d,s", MATCH_SSHA256_SUM1, MASK_SSHA256_SUM1, match_opcode, 0},
+{"ssm3.p0"      , 0, INSN_CLASS_I,      "d,s", MATCH_SSM3_P0, MASK_SSM3_P0, match_opcode, 0},
+{"ssm3.p1"      , 0, INSN_CLASS_I,      "d,s", MATCH_SSM3_P1, MASK_SSM3_P1, match_opcode, 0},
+{"ssha512.sig0l", 0, INSN_CLASS_I,    "d,s,t", MATCH_SSHA512_SIG0L, MASK_SSHA512_SIG0L, match_opcode, 0},
+{"ssha512.sig0h", 0, INSN_CLASS_I,    "d,s,t", MATCH_SSHA512_SIG0H, MASK_SSHA512_SIG0H, match_opcode, 0},
+{"ssha512.sig1l", 0, INSN_CLASS_I,    "d,s,t", MATCH_SSHA512_SIG1L, MASK_SSHA512_SIG1L, match_opcode, 0},
+{"ssha512.sig1h", 0, INSN_CLASS_I,    "d,s,t", MATCH_SSHA512_SIG1H, MASK_SSHA512_SIG1H, match_opcode, 0},
+{"ssha512.sum0r", 0, INSN_CLASS_I,    "d,s,t", MATCH_SSHA512_SUM0R, MASK_SSHA512_SUM0R, match_opcode, 0},
+{"ssha512.sum1r", 0, INSN_CLASS_I,    "d,s,t", MATCH_SSHA512_SUM1R, MASK_SSHA512_SUM1R, match_opcode, 0},
+{"ssha512.sig0" ,64, INSN_CLASS_I,      "d,s", MATCH_SSHA512_SIG0, MASK_SSHA512_SIG0, match_opcode, 0},
+{"ssha512.sig1" ,64, INSN_CLASS_I,      "d,s", MATCH_SSHA512_SIG1, MASK_SSHA512_SIG1, match_opcode, 0},
+{"ssha512.sum0" ,64, INSN_CLASS_I,      "d,s", MATCH_SSHA512_SUM0, MASK_SSHA512_SUM0, match_opcode, 0},
+{"ssha512.sum1" ,64, INSN_CLASS_I,      "d,s", MATCH_SSHA512_SUM1, MASK_SSHA512_SUM1, match_opcode, 0},
+{"pollentropy"  , 0, INSN_CLASS_I,      "d,>", MATCH_POLLENTROPY, MASK_POLLENTROPY, match_opcode, 0},
+
 /* Single-precision floating-point instruction subset */
 {"frcsr",     0, INSN_CLASS_F,   "d",  MATCH_FRCSR, MASK_FRCSR, match_opcode, INSN_ALIAS },
 {"frsr",      0, INSN_CLASS_F,   "d",  MATCH_FRCSR, MASK_FRCSR, match_opcode, INSN_ALIAS },
